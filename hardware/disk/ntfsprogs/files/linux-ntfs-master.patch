diff --git a/ChangeLog b/ChangeLog
index 710c395..cef7752 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,14 @@
+xx/xx/2007 - 2.0.1
+
+	- Avoid endless loop when try to mount highly damaged volume with
+	  nubmer of sectors set to 0.  (Yura, reported by Erik Larsson)
+	- Raise FUSE dependency to 2.7.0 because we use user option in
+	  ntfsmount.  (Yura, reported by Andrey Rahmatullin)
+	- ntfsck: Use ntfs_pread instead ops->pread.  (Yura, reported by
+	  Christophe GRENIER)
+	- ntfsclone: Allow metadata cloning to block devices when --force
+	  option is supplied.  (Anton)
+
 28/09/2007 - 2.0.0 - ntfsmount sports full read/write, libntfs can read
 		     encrypted files and ntfsresize supports Vista.
 
diff --git a/configure.ac b/configure.ac
index bb2c49f..05b5efe 100644
--- a/configure.ac
+++ b/configure.ac
@@ -192,11 +192,11 @@ AM_CONDITIONAL(ENABLE_GNOME_VFS, $compile_gnome_vfs)
 # Autodetect whether to build FUSE module or not.
 compile_ntfsmount=false
 if test "$enable_ntfsmount" != "no"; then
-	PKG_CHECK_MODULES(FUSE, fuse >= 2.6.1, [ compile_ntfsmount=true ],
+	PKG_CHECK_MODULES(FUSE, fuse >= 2.7.0, [ compile_ntfsmount=true ],
 		if test "$enable_ntfsmount" = "yes"; then
-			AC_MSG_ERROR([ntfsmount requires FUSE version >= 2.6.1.])
+			AC_MSG_ERROR([ntfsmount requires FUSE version >= 2.7.0.])
 		else
-			AC_MSG_WARN([ntfsmount requires FUSE version >= 2.6.1.])
+			AC_MSG_WARN([ntfsmount requires FUSE version >= 2.7.0.])
 		fi
 	)
 fi
diff --git a/libntfs/bootsect.c b/libntfs/bootsect.c
index 4278ac1..a346904 100644
--- a/libntfs/bootsect.c
+++ b/libntfs/bootsect.c
@@ -196,13 +196,18 @@ int ntfs_boot_sector_parse(ntfs_volume *vol, const NTFS_BOOT_SECTOR *bs)
 			sle64_to_cpu(bs->number_of_sectors));
 	ntfs_log_debug("SectorsPerCluster = 0x%x\n", sectors_per_cluster);
 	if (sectors_per_cluster & (sectors_per_cluster - 1)) {
-		ntfs_log_debug("Error: %s is not a valid NTFS partition! "
+		ntfs_log_error("Error: %s is not a valid NTFS partition! "
 				"sectors_per_cluster is not a power of 2.\n",
 				vol->dev->d_name);
 		return -1;
 	}
 	vol->nr_clusters = sle64_to_cpu(bs->number_of_sectors) >>
 			(ffs(sectors_per_cluster) - 1);
+	if (!vol->nr_clusters) {
+		ntfs_log_error("Error: %s is not a valid NTFS partition! "
+				"nr_clusters is 0.\n", vol->dev->d_name);
+		return -1;
+	}
 
 	vol->mft_lcn = sle64_to_cpu(bs->mft_lcn);
 	vol->mftmirr_lcn = sle64_to_cpu(bs->mftmirr_lcn);
@@ -210,15 +215,15 @@ int ntfs_boot_sector_parse(ntfs_volume *vol, const NTFS_BOOT_SECTOR *bs)
 	ntfs_log_debug("MFTMirr LCN = 0x%llx\n", vol->mftmirr_lcn);
 	if (vol->mft_lcn > vol->nr_clusters ||
 			vol->mftmirr_lcn > vol->nr_clusters) {
-		ntfs_log_debug("Error: %s is not a valid NTFS partition!\n",
+		ntfs_log_error("Error: %s is not a valid NTFS partition!\n",
 				vol->dev->d_name);
-		ntfs_log_debug("($Mft LCN or $MftMirr LCN is greater than the "
+		ntfs_log_error("($Mft LCN or $MftMirr LCN is greater than the "
 				"number of clusters!)\n");
 		return -1;
 	}
 	vol->cluster_size = sectors_per_cluster * vol->sector_size;
 	if (vol->cluster_size & (vol->cluster_size - 1)) {
-		ntfs_log_debug("Error: %s is not a valid NTFS partition! "
+		ntfs_log_error("Error: %s is not a valid NTFS partition! "
 				"cluster_size is not a power of 2.\n",
 				vol->dev->d_name);
 		return -1;
diff --git a/libntfs/libntfs.8.in b/libntfs/libntfs.8.in
index f908f7c..27a29b4 100644
--- a/libntfs/libntfs.8.in
+++ b/libntfs/libntfs.8.in
@@ -12,9 +12,9 @@ NTFS volumes if\fB libntfs\fR was compiled with \fB--enable-crypto\fR option
 (it depends on\fB libgcrypt\fR,\fB GNU TLS\fR and \fBlibconfig\fR) and user
 wrote configuration file. Configuration file should be placed in
 \fB/etc/libntfs/config\fR or \fB$(HOME)/.libntfs/config\fR and contain list
-of .PFX key files (see ntfsprogs-<version>/libntfs/config in ntfsprogs source
-tarball for sample configuration file). Key files can be created/exported
-using\fB cipher\fR tool under windows.
+of .PFX key files (see \fBntfsprogs-@VERSION@/libntfs/config\fR in ntfsprogs
+sources tarball for sample configuration file). Key files can be
+created/exported using\fB cipher\fR tool under windows.
 .SH AUTHORS
 \fBlibntfs\fR was written by Anton Altaparmakov, Richard Russon, Szabolcs Szakacsits, Yuval Fledel and Yura Pakhuchiy.
 .SH AVAILABILITY
diff --git a/libntfs/logging.c b/libntfs/logging.c
index 1c76719..d7b807e 100644
--- a/libntfs/logging.c
+++ b/libntfs/logging.c
@@ -75,8 +75,7 @@ static struct ntfs_logging ntfs_log = (struct ntfs_logging) {
 	.levels = NTFS_LOG_LEVEL_INFO | NTFS_LOG_LEVEL_QUIET |
 			NTFS_LOG_LEVEL_WARNING | NTFS_LOG_LEVEL_ERROR |
 			NTFS_LOG_LEVEL_PERROR | NTFS_LOG_LEVEL_CRITICAL |
-			NTFS_LOG_LEVEL_PROGRESS |
-			0,
+			NTFS_LOG_LEVEL_PROGRESS,
 	.flags = NTFS_LOG_FLAG_ONLYNAME,
 	.handler = ntfs_log_handler_null,
 };
diff --git a/ntfsprogs/ntfsck.c b/ntfsprogs/ntfsck.c
index 2171a62..3a1047e 100644
--- a/ntfsprogs/ntfsck.c
+++ b/ntfsprogs/ntfsck.c
@@ -196,7 +196,7 @@ static BOOL verify_boot_sector(struct ntfs_device *dev)
 
 	current_mft_record = 9;
 
-	if (dev->d_ops->pread(dev, buf, sizeof(buf), 0)!=sizeof(buf)) {
+	if (ntfs_pread(dev, 0, sizeof(buf), buf) != sizeof(buf)) {
 		check_failed("Failed to read boot sector.\n");
 		return 1;
 	}
@@ -258,7 +258,8 @@ static runlist *load_runlist(struct ntfs_device *dev, s64 offset_to_file_record,
 	if (!buf)
 		return NULL;
 
-	if (dev->d_ops->pread(dev, buf, size_of_file_record, offset_to_file_record)!=size_of_file_record) {
+	if (ntfs_pread(dev, offset_to_file_record, size_of_file_record, buf) !=
+			size_of_file_record) {
 		check_failed("Failed to read file record at offset %lld (0x%llx).\n", offset_to_file_record, offset_to_file_record);
 		return NULL;
 	}
diff --git a/ntfsprogs/ntfsclone.c b/ntfsprogs/ntfsclone.c
index dfcb58d..a402f9f 100644
--- a/ntfsprogs/ntfsclone.c
+++ b/ntfsprogs/ntfsclone.c
@@ -420,9 +420,17 @@ static void parse_options(int argc, char **argv)
 
 			if (S_ISBLK(st.st_mode)) {
 				opt.blkdev_out = 1;
-				if (opt.metadata)
+				if (opt.metadata && !opt.force)
 					err_exit("Cloning only metadata to a "
-					     "block device isn't supported!\n");
+					     "block device does not usually "
+					     "make sense, aborting...\n"
+					     "If you were instructed to do "
+					     "this by a developer and/or are "
+					     "sure that this is what you want "
+					     "to do, run this utility again "
+					     "but this time add the force "
+					     "option, i.e. add '--force' to "
+					     "the command line arguments.");
 			}
 		}
 	}
@@ -521,6 +529,8 @@ static int io_all(void *fd, void *buf, int count, int do_write)
 		if (i < 0) {
 			if (errno != EAGAIN && errno != EINTR)
 				return -1;
+		} else if (i == 0 && !do_write && opt.restore_image) {
+			return -1;
 		} else {
 			count -= i;
 			buf = i + (char *) buf;
diff --git a/ntfsprogs/ntfsinfo.c b/ntfsprogs/ntfsinfo.c
index 6a30cb2..9127dc1 100644
--- a/ntfsprogs/ntfsinfo.c
+++ b/ntfsprogs/ntfsinfo.c
@@ -86,7 +86,6 @@ static struct options {
 	const char *device;	/* Device/File to work with */
 	const char *filename;	/* Resolve this filename to mft number */
 	s64	 inode;		/* Info for this inode */
-	int	 debug;		/* Debug output */
 	int	 quiet;		/* Less output */
 	int	 verbose;	/* Extra output */
 	int	 force;		/* Override common sense */
@@ -137,9 +136,6 @@ static void usage(void)
 		"    -v, --verbose    More output\n"
 		"    -V, --version    Display version information\n"
 		"    -h, --help       Display this help\n"
-#ifdef DEBUG
-                "    -d, --debug            Show debug information\n"
-#endif
 	        "\n",
 		EXEC_NAME);
 	printf("%s%s\n", ntfs_bugs, ntfs_home);
@@ -158,9 +154,6 @@ static int parse_options(int argc, char *argv[])
 {
 	static const char *sopt = "-:dfhi:F:mqtTvV";
 	static const struct option lopt[] = {
-#ifdef DEBUG
-                { "debug",      no_argument,            NULL, 'd' },
-#endif
 		{ "force",	 no_argument,		NULL, 'f' },
 		{ "help",	 no_argument,		NULL, 'h' },
 		{ "inode",	 required_argument,	NULL, 'i' },
@@ -192,9 +185,6 @@ static int parse_options(int argc, char *argv[])
 			else
 				err++;
 			break;
-		case 'd':
-			opts.debug++;
-			break;
 		case 'i':
 			if ((opts.inode != -1) ||
 			    (!utils_parse_size(optarg, &opts.inode, FALSE))) {
@@ -280,7 +270,7 @@ static int parse_options(int argc, char *argv[])
 			err++;
 		}
 
-		if ((opts.inode == -1) && (opts.filename == NULL) && !opts.mft) {
+		if (opts.inode == -1 && !opts.filename && !opts.mft) {
 			if (argc > 1)
 				ntfs_log_error("You must specify an inode to "
 					"learn about.\n");
@@ -302,14 +292,6 @@ static int parse_options(int argc, char *argv[])
 
 	}
 
-#ifdef DEBUG
-	if (!opts.debug)
-		if (!freopen("/dev/null", "w", stderr)) {
-			ntfs_log_perror("Failed to freopen stderr to /dev/null");
-			exit(1);
-		}
-#endif
-
 	if (ver)
 		version();
 	if (help || err)
diff --git a/ntfsprogs/ntfsmount.c b/ntfsprogs/ntfsmount.c
index 426b03c..5d2daa8 100644
--- a/ntfsprogs/ntfsmount.c
+++ b/ntfsprogs/ntfsmount.c
@@ -171,6 +171,7 @@ static const struct fuse_opt ntfs_fuse_opts[] = {
 	FUSE_OPT_KEY("fsname=", FUSE_OPT_KEY_DISCARD),
 	FUSE_OPT_KEY("blkdev", FUSE_OPT_KEY_DISCARD),
 	FUSE_OPT_KEY("blksize=", FUSE_OPT_KEY_DISCARD),
+	FUSE_OPT_KEY("uhelper=", FUSE_OPT_KEY_DISCARD),
 	FUSE_OPT_KEY("ro", FUSE_OPT_KEY_KEEP),
 	FUSE_OPT_KEY("rw", FUSE_OPT_KEY_KEEP),
 	FUSE_OPT_KEY("atime", FUSE_OPT_KEY_KEEP),
