--- src/engine/encoding.cpp
+++ src/engine/encoding.cpp
@@ -105,7 +105,7 @@
 
 // the following only does 1-byte encodings for which an EncTable is defined
 
-EncResult encInternalConv(void *intCD, const char** inbuf, 
+EncResult encInternalConv(void *intCD, char** inbuf, 
                                   size_t *inbytesleft,
                                   char **outbuf, size_t *outbytesleft)
 {
@@ -266,7 +266,7 @@
     return OK;
 }
 
-eFlag Recoder::conv(Sit S, CDesc cd, const char *& inbuf, size_t &inbytesleft, 
+eFlag Recoder::conv(Sit S, CDesc cd, char *& inbuf, size_t &inbytesleft, 
         char *& outbuf, size_t &outbytesleft, EncResult& result)
 {
     sabassert(cd);
--- src/engine/encoding.h
+++ src/engine/encoding.h
@@ -73,7 +73,7 @@
     Bool handledByExpat(const Str& enc) const;
     eFlag openFromUTF8(Sit S, const Str& enc, CDesc& cd);
     eFlag openToUTF8(Sit S, const Str& enc, CDesc& cd);
-    eFlag conv(Sit S, CDesc cd, const char *&inbuf, size_t &inbytesleft, 
+    eFlag conv(Sit S, CDesc cd, char *&inbuf, size_t &inbytesleft, 
         char *&outbuf, size_t &outbytesleft, EncResult& result);
     eFlag close(Sit S, CDesc cd);
     void clear(Sit S);
--- src/engine/shandler.h
+++ src/engine/shandler.h
@@ -343,7 +343,7 @@
 */
 
 typedef EHResult EncHandlerConv(void* userData, SablotHandle processor_,
-    EHDescriptor cd, const char** inbuf, size_t *inbytesleft,
+    EHDescriptor cd, char** inbuf, size_t *inbytesleft,
     char ** outbuf, size_t *outbytesleft);
 
 /*
--- src/engine/output.cpp
+++ src/engine/output.cpp
@@ -625,7 +625,7 @@
 
     indentFull();
     sendLit(S, "<!--");
-    const char *p = contents, *p_was = p;
+    char *p = contents, *p_was = p;
     int len = contents.length();
     Bool trailingHyphen = len ? (contents[len - 1] == '-') : FALSE;
     while (*p)
@@ -654,7 +654,7 @@
     }; break;
   default:
     {
-      const char *p = contents, *p_was = p;
+      char *p = contents, *p_was = p;
       if (!*p)
         return OK;
       indentFull();
@@ -783,7 +783,7 @@
     return OK;
 }
 
-int PhysicalOutputLayerObj::writeCharacterRef(char* dest, const char *src, EscMode escapeMode)
+int PhysicalOutputLayerObj::writeCharacterRef(char* dest, char *src, EscMode escapeMode)
 {
     char *dest_was = dest;
     if (escapeMode == ESCAPING_URI || escapeMode == ESCAPING_HTML_URI)
@@ -802,10 +802,10 @@
 // data is assumed null-terminated in the following
 
 eFlag PhysicalOutputLayerObj::sendOutUntil(Sit S, 
-    const char *& data, int length,
-    EscMode escapeMode, const char* stoppingText)
+    char *& data, int length,
+    EscMode escapeMode, char* stoppingText)
 {
-    const char *p = strstr(data, stoppingText);
+    char *p = strstr(data, stoppingText);
     int sending = (p ? p - data : length);
     E( sendOut(S, data, sending, escapeMode) );
     data += sending;
@@ -825,7 +825,7 @@
 //
 
 eFlag PhysicalOutputLayerObj::sendOut(Sit S, 
-    const char* data, int length,
+    char* data, int length,
     EscMode escapeMode)
 {
     int count = 0;
--- src/engine/output.h
+++ src/engine/output.h
@@ -225,10 +225,10 @@
     Str encoding;
     CDesc encodingCD;
     Bool defaultNSWas;
-    eFlag sendOut(Sit S, const char* data, int length, EscMode escapeMode);
-    eFlag sendOutUntil(Sit S, const char* & data, int length,
-        EscMode escapeMode, const char* stoppingText);
-    int writeCharacterRef(char* dest, const char *src, EscMode escapeMode);
+    eFlag sendOut(Sit S, char* data, int length, EscMode escapeMode);
+    eFlag sendOutUntil(Sit S, char* & data, int length,
+        EscMode escapeMode, char* stoppingText);
+    int writeCharacterRef(char* dest, char *src, EscMode escapeMode);
     eFlag flushBuffer(Sit S);
     void report(Sit S, MsgType type, MsgCode code, const Str& arg1, const Str& arg2);
 };
--- src/engine/parser.cpp
+++ src/engine/parser.cpp
@@ -301,7 +301,7 @@
     GPA( GChar ) rawAux = rawBuffer = new char[PARSE_BUFSIZE + 1];
 
     char *outbuf = (char *) convBuffer;
-    const char *inbuf = (char *) rawBuffer;
+    char *inbuf = (char *) rawBuffer;
 
     Bool quit = FALSE, firstTime = TRUE;
     Bool mustConvert = FALSE, haveReadAll = FALSE;
