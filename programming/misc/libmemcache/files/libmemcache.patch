diff -Nuar libmemcache-1.4.0.rc2.orig/configure.ac libmemcache-1.4.0.rc2/configure.ac
--- libmemcache-1.4.0.rc2.orig/configure.ac	2008-09-02 13:10:32.000000000 +0300
+++ libmemcache-1.4.0.rc2/configure.ac	2008-09-02 13:30:14.000000000 +0300
@@ -92,13 +92,16 @@
 AC_SUBST(MCM_KEY_VALID_LEN)
 
 
-
-dnl CFLAGS crap
+AC_MSG_CHECKING([if $CC supports -Wall])
+CFLAGS_orig=$CFLAGS
+CFLAGS="$CFLAGS -Wall"
+AC_COMPILE_IFELSE(AC_LANG_PROGRAM(,),
+   [ AC_MSG_RESULT(yes) ;
 CFLAGS="-Wall -pipe"
 DEBUG_cflags="-g -Wunused -Wshadow -Wpointer-arith -Wbad-function-cast -Wcast-qual -Wcast-align -Wwrite-strings -Wsign-compare -Waggregate-return -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wmissing-noreturn -Wformat -Wredundant-decls -Wnested-externs -Winline -pedantic"
 OPTIMIZE="-O3"
-PROFILE="-g -pg"
-
+],
+[ CFLAGS=$CFLAGS_orig; AC_MSG_RESULT(no) ])
 AC_MSG_CHECKING([if $CC supports -Wpacked])
 CFLAGS_orig=$CFLAGS
 CFLAGS="$CFLAGS -Wpacked"
@@ -113,12 +116,18 @@
   [ AC_MSG_RESULT(yes) ],
   [ CFLAGS=$CFLAGS_orig; AC_MSG_RESULT(no) ])
 
-AC_MSG_CHECKING([if $CC supports -std=c99])
-CFLAGS_orig=$CFLAGS
-CFLAGS="-std=c99 $CFLAGS"
-AC_COMPILE_IFELSE(AC_LANG_PROGRAM(,),
-  [ AC_MSG_RESULT(yes) ],
-  [ CFLAGS=$CFLAGS_orig; AC_MSG_RESULT(no) ])
+dnl Sun CC does not exit with exitcode 1 for this
+dnl It just prints out a warning (it seems to me that this
+dnl is because it breaks it up into -s -t -d=c99 and if you
+dnl pass a single-letter that it doesn't understand it use
+dnl exit code 0...
+dnl
+dnl AC_MSG_CHECKING([if $CC supports -std=c99])
+dnl CFLAGS_orig=$CFLAGS
+dnl CFLAGS="-std=c99 $CFLAGS"
+dnl AC_COMPILE_IFELSE(AC_LANG_PROGRAM(,),
+dnl   [ AC_MSG_RESULT(yes) ],
+dnl   [ CFLAGS=$CFLAGS_orig; AC_MSG_RESULT(no) ])
 
 dnl BEGIN variadic macro support
 AC_MSG_CHECKING([if $CC supports variadic macros])
diff -Nuar libmemcache-1.4.0.rc2.orig/include/memcache/buffer.h libmemcache-1.4.0.rc2/include/memcache/buffer.h
--- libmemcache-1.4.0.rc2.orig/include/memcache/buffer.h	2008-09-02 13:10:32.000000000 +0300
+++ libmemcache-1.4.0.rc2/include/memcache/buffer.h	2008-09-02 13:23:02.000000000 +0300
@@ -63,14 +63,14 @@
 struct memcache_buf	*mcm_buf_find_replace2(struct memcache_ctxt *, struct memcache_buf *,
 						    const char *, struct memcache_buf *);
 int	 mcm_buf_free(struct memcache_ctxt *, struct memcache_buf **);
-inline u_int32_t	 mcm_buf_len(const struct memcache_ctxt *, const struct memcache_buf *);
+u_int32_t	 mcm_buf_len(const struct memcache_ctxt *, const struct memcache_buf *);
 struct memcache_buf	*mcm_buf_new(struct memcache_ctxt *);
 struct memcache_buf	*mcm_buf_new2(struct memcache_ctxt *, const char *, const u_int32_t);
 struct memcache_buf	*mcm_buf_new3(struct memcache_ctxt *, const char *);
 size_t	 mcm_buf_read(struct memcache_ctxt *, struct memcache_buf *, int);
 int	 mcm_buf_realloc(struct memcache_ctxt *, struct memcache_buf *, const u_int32_t);
-inline size_t	 mcm_buf_remain(const struct memcache_ctxt *, const struct memcache_buf *);
-inline size_t	 mcm_buf_remain_off(const struct memcache_ctxt *, const struct memcache_buf *);
+size_t	 mcm_buf_remain(const struct memcache_ctxt *, const struct memcache_buf *);
+size_t	 mcm_buf_remain_off(const struct memcache_ctxt *, const struct memcache_buf *);
 int	 mcm_buf_replace(struct memcache_ctxt *, struct memcache_buf *, const char *, const u_int32_t);
 int	 mcm_buf_replace2(struct memcache_ctxt *, struct memcache_buf *, const char *);
 int	 mcm_buf_replace_buf(struct memcache_ctxt *, struct memcache_buf *, struct memcache_buf *);
diff -Nuar libmemcache-1.4.0.rc2.orig/include/memcache.h.in libmemcache-1.4.0.rc2/include/memcache.h.in
--- libmemcache-1.4.0.rc2.orig/include/memcache.h.in	2008-09-02 13:10:32.000000000 +0300
+++ libmemcache-1.4.0.rc2/include/memcache.h.in	2008-09-02 13:21:05.000000000 +0300
@@ -295,10 +295,11 @@
 /* End various TAILQ macros */
 
 
+#ifdef __MEMCACHE__
 /* Load struct memcache_buf, but none of the prototypes that operate
  * on struct memcache_buf. */
 #include <memcache/_buffer.h>
-
+#endif
 
 /* Error handling information struct */
 struct memcache_err_ctxt {
@@ -923,7 +924,7 @@
 		 mcMallocFunc *mallocAtomicFunc, mcReallocFunc *reallocFunc);
 
 /* Returns a pointer to the global context. */
-inline struct memcache_ctxt *mc_global_ctxt(void);
+struct memcache_ctxt *mc_global_ctxt(void);
 
 /* The next two functions are used to setup an error handler. */
 int	mcErrSetup(mcErrFunc errFunc);
@@ -1061,19 +1062,19 @@
 /* BEGIN - Error handling convenience macros */
 #define ERR_FLAG	0x1
 #define WARN_FLAG	0x2
-#define NO_ERRNO_FLAG	0x4
-#define MCM_ERR(_code)			mcm_err(ctxt, ERR_FLAG, __FUNCTION__, __LINE__, _code, NULL, 0, 0)
-#define MCM_ERR_MSG(_code, _msg)	mcm_err(ctxt, ERR_FLAG, __FUNCTION__, __LINE__, _code, _msg, (_msg != NULL ? strlen(_msg) : 0), 0)
-#define MCM_ERR_MSG_LVL(_code, _msg, _lvl)	mcm_err(ctxt, ERR_FLAG, __FUNCTION__, __LINE__, _code, _msg, (_msg != NULL ? strlen(_msg) : 0), _lvl)
-#define MCM_ERRX(_code)			mcm_err(ctxt, ERR_FLAG|NO_ERRNO_FLAG, __FUNCTION__, __LINE__, _code, NULL, 0, 0)
-#define MCM_ERRX_MSG_LVL(_code, _msg, _lvl)	mcm_err(ctxt, ERR_FLAG|NO_ERRNO_FLAG, __FUNCTION__, __LINE__, _code, _msg, (_msg != NULL ? strlen(_msg) : 0), _lvl)
-#define MCM_ERRX_MSG(_code, _msg)	mcm_err(ctxt, ERR_FLAG|NO_ERRNO_FLAG, __FUNCTION__, __LINE__, _code, _msg, (_msg != NULL ? strlen(_msg) : 0), 0)
-#define MCM_WARNX(_code, _msg)		mcm_err(ctxt, WARN_FLAG|NO_ERRNO_FLAG, __FUNCTION__, __LINE__, _code, _msg, (_msg != NULL ? strlen(_msg) : 0), 0)
-#define MCM_WARN_MSG(_code, _msg)	mcm_err(ctxt, WARN_FLAG, __FUNCTION__, __LINE__, _code, _msg, (_msg != NULL ? strlen(_msg) : 0), 0)
-#define MCM_WARN_MSGLEN(_code, _m, _l)	mcm_err(ctxt, WARN_FLAG, __FUNCTION__, __LINE__, _code, _m, _l, 0)
-#define MCM_WARN_MSG_LVL(_code, _msg, _lvl)	mcm_err(ctxt, WARN_FLAG, __FUNCTION__, __LINE__, _code, _msg, (_msg != NULL ? strlen(_msg) : 0), _lvl)
-#define MCM_WARNX_MSG(_code, _msg)	mcm_err(ctxt, WARN_FLAG|NO_ERRNO_FLAG, __FUNCTION__, __LINE__, _code, _msg, (_msg != NULL ? strlen(_msg) : 0), 0)
-#define MCM_WARNX_MSGLEN(_code, _m, _l)	mcm_err(ctxt, WARN_FLAG|NO_ERRNO_FLAG, __FUNCTION__, __LINE__, _code, _m, _l, 0)
+#define NO_ERRNO_FLAG	    0x4
+#define MCM_ERR(_code)                 mcm_err(ctxt, ERR_FLAG, __func__, __LINE__, _code, NULL, 0, 0)
+#define MCM_ERR_MSG(_code, _msg)       mcm_err(ctxt, ERR_FLAG, __func__, __LINE__, _code, _msg, (_msg != NULL ? strlen(_msg) : 0), 0)
+#define MCM_ERR_MSG_LVL(_code, _msg, _lvl)     mcm_err(ctxt, ERR_FLAG, __func__, __LINE__, _code, _msg, (_msg != NULL ? strlen(_msg) : 0), _lvl)
+#define MCM_ERRX(_code)                        mcm_err(ctxt, ERR_FLAG|NO_ERRNO_FLAG, __func__, __LINE__, _code, NULL, 0, 0)
+#define MCM_ERRX_MSG_LVL(_code, _msg, _lvl)    mcm_err(ctxt, ERR_FLAG|NO_ERRNO_FLAG, __func__, __LINE__, _code, _msg, (_msg != NULL ? strlen(_msg) : 0), _lvl)
+#define MCM_ERRX_MSG(_code, _msg)      mcm_err(ctxt, ERR_FLAG|NO_ERRNO_FLAG, __func__, __LINE__, _code, _msg, (_msg != NULL ? strlen(_msg) : 0), 0)
+#define MCM_WARNX(_code, _msg)         mcm_err(ctxt, WARN_FLAG|NO_ERRNO_FLAG, __func__, __LINE__, _code, _msg, (_msg != NULL ? strlen(_msg) : 0), 0)
+#define MCM_WARN_MSG(_code, _msg)      mcm_err(ctxt, WARN_FLAG, __func__, __LINE__, _code, _msg, (_msg != NULL ? strlen(_msg) : 0), 0)
+#define MCM_WARN_MSGLEN(_code, _m, _l) mcm_err(ctxt, WARN_FLAG, __func__, __LINE__, _code, _m, _l, 0)
+#define MCM_WARN_MSG_LVL(_code, _msg, _lvl)    mcm_err(ctxt, WARN_FLAG, __func__, __LINE__, _code, _msg, (_msg != NULL ? strlen(_msg) : 0), _lvl)
+#define MCM_WARNX_MSG(_code, _msg)     mcm_err(ctxt, WARN_FLAG|NO_ERRNO_FLAG, __func__, __LINE__, _code, _msg, (_msg != NULL ? strlen(_msg) : 0), 0)
+#define MCM_WARNX_MSGLEN(_code, _m, _l)        mcm_err(ctxt, WARN_FLAG|NO_ERRNO_FLAG, __func__, __LINE__, _code, _m, _l, 0)
 #define MCM_RET_CODE(_v)		(ctxt->ectxt->retcode != 0 ? ctxt->ectxt->retcode : _v)
 /* END - Error handling convenience macros */
 
diff -Nuar libmemcache-1.4.0.rc2.orig/src/buffer.c libmemcache-1.4.0.rc2/src/buffer.c
--- libmemcache-1.4.0.rc2.orig/src/buffer.c	2008-09-02 13:10:32.000000000 +0300
+++ libmemcache-1.4.0.rc2/src/buffer.c	2008-09-02 13:23:35.000000000 +0300
@@ -36,6 +36,7 @@
 #include <sys/uio.h>
 #include <unistd.h>
 #include <sys/errno.h>
+#include <errno.h>
 
 #include "memcache/buffer.h"
 
diff -Nuar libmemcache-1.4.0.rc2.orig/src/memcache.c libmemcache-1.4.0.rc2/src/memcache.c
--- libmemcache-1.4.0.rc2.orig/src/memcache.c	2008-09-02 13:10:32.000000000 +0300
+++ libmemcache-1.4.0.rc2/src/memcache.c	2008-09-02 13:50:25.000000000 +0300
@@ -278,7 +278,7 @@
 }
 
 
-inline struct memcache_ctxt *
+struct memcache_ctxt *
 mc_global_ctxt(void) {
   return &mcGlobalCtxt;
 }
@@ -978,10 +978,9 @@
 
 int
 mcm_err_filter_add(struct memcache_ctxt *ctxt, const u_int32_t err_mask) {
-  if ((ctxt->MCM_ERR_MASK & err_mask) == ctxt->MCM_ERR_MASK)
+ if ((ctxt->MCM_ERR_MASK & err_mask) == 0)
     return 0;
-
-  ctxt->MCM_ERR_MASK &= err_mask;
+  ctxt->MCM_ERR_MASK |= err_mask;
   return 1;
 }
 
@@ -1132,6 +1131,10 @@
      * having been attempted. */
     res->_flags |= MCM_RES_ATTEMPTED;
 
+    /* Clear the found-flag.. */
+     res->_flags &= ~MCM_RES_FOUND;
+
+
     /* While we're looping, might as well see if we should be auto
      * deleting any of these keys. */
     if ((res->_flags & (MCM_RES_FREE_ON_DELETE | MCM_RES_NO_FREE_ON_DELETE)) ==
diff -Nuar libmemcache-1.4.0.rc2.orig/test/benchmark/benchmark.c libmemcache-1.4.0.rc2/test/benchmark/benchmark.c
--- libmemcache-1.4.0.rc2.orig/test/benchmark/benchmark.c	2008-09-02 13:10:32.000000000 +0300
+++ libmemcache-1.4.0.rc2/test/benchmark/benchmark.c	2008-09-02 13:54:20.000000000 +0300
@@ -70,8 +70,7 @@
     tests = strdup(argv[3]);
 
   if (tests == NULL)
-    tests = strdup("adgs");
-
+   tests = strdup("adgGs");
   if (valsize == 0)
     valsize = 50;
 
@@ -114,6 +113,29 @@
     printf(fmt, "set", num_tests / tt(&t1, &t2), tt(&t1, &t2), tt(&t1, &t2) / num_tests);
   }
 
+/* same get benchmark, but with overhead for each request. */
+  if (strchr(tests, (int)'G') != NULL) {
+  /* BEGIN get request */
+  if (gettimeofday(&t1, NULL) != 0)
+  err(EX_OSERR, "gettimeofday(2)");
+ 
+     for (i = 0; i < num_tests; i++) {
+       req = mc_req_new();
+       res = mc_req_add(req, key, keylen);
+       res->size = valsize;
+       res->val = malloc(res->size);
+       mc_res_free_on_delete(res, 1);
+ 
+       mc_get(mc, req);
+       mc_req_free(req);
+     }
+ 
+     if (gettimeofday(&t2, NULL) != 0)
+       err(EX_OSERR, "gettimeofday(2)");
+ 
+    /* END get test */
+     printf(fmt, "fget", num_tests / tt(&t1, &t2), tt(&t1, &t2), tt(&t1, &t2) / num_tests);
+   }
 
   if (strchr(tests, (int)'g') != NULL) {
     /* BEGIN get request */
diff -Nuar libmemcache-1.4.0.rc2.orig/test/regress/regress.c libmemcache-1.4.0.rc2/test/regress/regress.c
--- libmemcache-1.4.0.rc2.orig/test/regress/regress.c	2008-09-02 13:10:32.000000000 +0300
+++ libmemcache-1.4.0.rc2/test/regress/regress.c	2008-09-02 13:56:01.000000000 +0300
@@ -33,7 +33,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include <unistd.h>
-
+#include <assert.h>
 #include <memcache.h>
 
 void test_add(struct memcache *mc, const u_int32_t);
@@ -70,8 +70,13 @@
     num_tests = 10;
 
   mc = mc_new();
-  mc_err_filter_del(MCM_ERR_LVL_INFO);
-  mc_err_filter_del(MCM_ERR_LVL_NOTICE);
+ /* test filter add/del and make sure info and level are NOT filtered out */
+   assert(mc_err_filter_del(MCM_ERR_LVL_INFO) == 0);
+   assert(mc_err_filter_del(MCM_ERR_LVL_NOTICE) == 0);
+   assert(mc_err_filter_add(MCM_ERR_LVL_NOTICE) == 1);
+   assert(mc_err_filter_add(MCM_ERR_LVL_NOTICE) == 0);
+   assert(mc_err_filter_del(MCM_ERR_LVL_NOTICE) == 1);
+   assert(mc_err_filter_get() == 0);
 
   if (mc == NULL)
     err(EX_OSERR, "Unable to allocate a new memcache object");
