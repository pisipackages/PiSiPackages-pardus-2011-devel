commit dacd66a53b559be9c26d2c523f168f1ef0261f4d
Author: Michael Snyder <msnyder@specifix.com>
Date:   Fri May 14 17:53:11 2010 +0000

    2010-05-14  Michael Snyder  <msnyder@vmware.com>
    
    	* dbxread.c: White space.
    	* dcache.c: White space.
    	* disasm.c: White space.
    	* doublest.c: White space.
    	* dsrec.c: White space.
    	* dummy-frame.c: White space.
    	* dwarf2expr.c: White space.
    	* dwarf2-frame.c: White space.
    	* dwarf2loc.c: White space.
    	* dwarf2read.c: White space.

--- gdb-7.1/gdb/dwarf2loc.c.orig	2010-05-25 23:06:46.000000000 +0200
+++ gdb-7.1/gdb/dwarf2loc.c	2010-05-25 23:06:46.000000000 +0200
@@ -236,6 +236,7 @@ static CORE_ADDR
 dwarf_expr_frame_cfa (void *baton)
 {
   struct dwarf_expr_baton *debaton = (struct dwarf_expr_baton *) baton;
+
   return dwarf2_frame_cfa (debaton->frame);
 }
 
@@ -444,6 +445,7 @@ read_pieced_value (struct value *v)
   for (i = 0; i < c->n_pieces; i++)
     {
       struct dwarf_expr_piece *p = &c->pieces[i];
+
       switch (p->location)
 	{
 	case DWARF_VALUE_REGISTER:
@@ -482,6 +484,7 @@ read_pieced_value (struct value *v)
 	  {
 	    struct gdbarch *gdbarch = get_type_arch (value_type (v));
 	    size_t n = p->size;
+
 	    if (n > c->addr_size)
 	      n = c->addr_size;
 	    store_unsigned_integer (contents + offset, n,
@@ -493,6 +496,7 @@ read_pieced_value (struct value *v)
 	case DWARF_VALUE_LITERAL:
 	  {
 	    size_t n = p->size;
+
 	    if (n > p->v.literal.length)
 	      n = p->v.literal.length;
 	    memcpy (contents + offset, p->v.literal.data, n);
@@ -525,6 +529,7 @@ write_pieced_value (struct value *to, st
   for (i = 0; i < c->n_pieces; i++)
     {
       struct dwarf_expr_piece *p = &c->pieces[i];
+
       switch (p->location)
 	{
 	case DWARF_VALUE_REGISTER:
@@ -712,6 +717,7 @@ static CORE_ADDR
 needs_frame_read_reg (void *baton, int regnum)
 {
   struct needs_frame_baton *nf_baton = baton;
+
   nf_baton->needs_frame = 1;
   return 1;
 }
@@ -742,6 +748,7 @@ static CORE_ADDR
 needs_frame_frame_cfa (void *baton)
 {
   struct needs_frame_baton *nf_baton = baton;
+
   nf_baton->needs_frame = 1;
   return 1;
 }
@@ -751,6 +758,7 @@ static CORE_ADDR
 needs_frame_tls_address (void *baton, CORE_ADDR offset)
 {
   struct needs_frame_baton *nf_baton = baton;
+
   nf_baton->needs_frame = 1;
   return 1;
 }
@@ -907,6 +915,7 @@ locexpr_read_variable (struct symbol *sy
 {
   struct dwarf2_locexpr_baton *dlbaton = SYMBOL_LOCATION_BATON (symbol);
   struct value *val;
+
   val = dwarf2_evaluate_loc_desc (SYMBOL_TYPE (symbol), frame, dlbaton->data,
 				  dlbaton->size, dlbaton->per_cu);
 
@@ -918,6 +927,7 @@ static int
 locexpr_read_needs_frame (struct symbol *symbol)
 {
   struct dwarf2_locexpr_baton *dlbaton = SYMBOL_LOCATION_BATON (symbol);
+
   return dwarf2_loc_desc_needs_frame (dlbaton->data, dlbaton->size,
 				      dlbaton->per_cu);
 }
