From e4f9d1093f41c1c7328b5c449476ed2d08b41fb8 Mon Sep 17 00:00:00 2001
From: Stefan Metzmacher <metze@samba.org>
Date: Tue, 31 Aug 2010 09:28:34 +0200
Subject: [PATCH 03/12] server/banning: also release all ips if we're banning ourself

metze
---
 include/ctdb_private.h |    1 +
 server/ctdb_banning.c  |   30 +++++++++++++++++++++++++++++-
 server/ctdb_monitor.c  |   18 +-----------------
 3 files changed, 31 insertions(+), 18 deletions(-)

diff --git a/include/ctdb_private.h b/include/ctdb_private.h
index 953552a..65f372a 100644
--- a/include/ctdb_private.h
+++ b/include/ctdb_private.h
@@ -1586,6 +1586,7 @@ int ctdb_vacuum_init(struct ctdb_db_context *ctdb_db);
 int32_t ctdb_control_enable_script(struct ctdb_context *ctdb, TDB_DATA indata);
 int32_t ctdb_control_disable_script(struct ctdb_context *ctdb, TDB_DATA indata);
 
+int32_t ctdb_local_node_got_banned(struct ctdb_context *ctdb);
 int32_t ctdb_control_set_ban_state(struct ctdb_context *ctdb, TDB_DATA indata);
 int32_t ctdb_control_get_ban_state(struct ctdb_context *ctdb, TDB_DATA *outdata);
 int32_t ctdb_control_set_db_priority(struct ctdb_context *ctdb, TDB_DATA indata);
diff --git a/server/ctdb_banning.c b/server/ctdb_banning.c
index a46f60b..35f1784 100644
--- a/server/ctdb_banning.c
+++ b/server/ctdb_banning.c
@@ -42,6 +42,31 @@ ctdb_ban_node_event(struct event_context *ev, struct timed_event *te,
 	}
 }
 
+int32_t ctdb_local_node_got_banned(struct ctdb_context *ctdb)
+{
+	uint32_t i;
+
+	/* make sure we are frozen */
+	DEBUG(DEBUG_NOTICE,("This node has been banned - forcing freeze and recovery\n"));
+
+	/* Reset the generation id to 1 to make us ignore any
+	   REQ/REPLY CALL/DMASTER someone sends to us.
+	   We are now banned so we shouldnt service database calls
+	   anymore.
+	*/
+	ctdb->vnn_map->generation = INVALID_GENERATION;
+
+	for (i=1; i<=NUM_DB_PRIORITIES; i++) {
+		if (ctdb_start_freeze(ctdb, i) != 0) {
+			DEBUG(DEBUG_ERR,(__location__ " Failed to freeze db priority %u\n", i));
+		}
+	}
+	ctdb_release_all_ips(ctdb);
+	ctdb->recovery_mode = CTDB_RECOVERY_ACTIVE;
+
+	return 0;
+}
+
 int32_t ctdb_control_set_ban_state(struct ctdb_context *ctdb, TDB_DATA indata)
 {
 	struct ctdb_ban_time *bantime = (struct ctdb_ban_time *)indata.dptr;
@@ -96,7 +121,10 @@ int32_t ctdb_control_set_ban_state(struct ctdb_context *ctdb, TDB_DATA indata)
 	ctdb->nodes[bantime->pnn]->flags |= NODE_FLAGS_BANNED;
 
 	event_add_timed(ctdb->ev, ctdb->banning_ctx, timeval_current_ofs(bantime->time,0), ctdb_ban_node_event, ctdb);
-	
+	if (bantime->pnn == ctdb->pnn) {
+		return ctdb_local_node_got_banned(ctdb);
+	}
+
 	return 0;
 }
 
diff --git a/server/ctdb_monitor.c b/server/ctdb_monitor.c
index 48a3f32..5a8fe28 100644
--- a/server/ctdb_monitor.c
+++ b/server/ctdb_monitor.c
@@ -432,7 +432,6 @@ int32_t ctdb_control_modflags(struct ctdb_context *ctdb, TDB_DATA indata)
 	struct ctdb_node_flag_change *c = (struct ctdb_node_flag_change *)indata.dptr;
 	struct ctdb_node *node;
 	uint32_t old_flags;
-	int i;
 
 	if (c->pnn >= ctdb->num_nodes) {
 		DEBUG(DEBUG_ERR,(__location__ " Node %d is invalid, num_nodes :%d\n", c->pnn, ctdb->num_nodes));
@@ -482,22 +481,7 @@ int32_t ctdb_control_modflags(struct ctdb_context *ctdb, TDB_DATA indata)
 
 	/* if we have become banned, we should go into recovery mode */
 	if ((node->flags & NODE_FLAGS_BANNED) && !(c->old_flags & NODE_FLAGS_BANNED) && (node->pnn == ctdb->pnn)) {
-		/* make sure we are frozen */
-		DEBUG(DEBUG_NOTICE,("This node has been banned - forcing freeze and recovery\n"));
-		/* Reset the generation id to 1 to make us ignore any
-		   REQ/REPLY CALL/DMASTER someone sends to us.
-		   We are now banned so we shouldnt service database calls
-		   anymore.
-		*/
-		ctdb->vnn_map->generation = INVALID_GENERATION;
-
-		for (i=1; i<=NUM_DB_PRIORITIES; i++) {
-			if (ctdb_start_freeze(ctdb, i) != 0) {
-				DEBUG(DEBUG_ERR,(__location__ " Failed to freeze db priority %u\n", i));
-			}
-		}
-		ctdb_release_all_ips(ctdb);
-		ctdb->recovery_mode = CTDB_RECOVERY_ACTIVE;
+		return ctdb_local_node_got_banned(ctdb);
 	}
 	
 	return 0;
-- 
1.7.4

