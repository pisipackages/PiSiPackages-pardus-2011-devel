Upstream has been contacted about this a few times ...

they dont want progress bars in mv/cp:
http://lists.gnu.org/archive/html/bug-coreutils/2003-08/msg00114.html
http://lists.gnu.org/archive/html/bug-coreutils/2003-09/msg00083.html
http://lists.gnu.org/archive/html/bug-coreutils/2003-09/msg00084.html

but they don't seem to mind a general util ... add this to future patchset:
http://lists.gnu.org/archive/html/bug-coreutils/2003-09/msg00101.html
http://lists.gnu.org/archive/html/bug-coreutils/2004-02/msg00071.html

Patch taken from gentoo sources, ported by Onur Küçük <onur[at]pardus.org.tr>

diff -Nur coreutils-6.12-old/src/copy.c coreutils-6.12/src/copy.c
--- coreutils-6.12-old/src/copy.c	2009-02-16 15:17:20.745201580 +0200
+++ coreutils-6.12/src/copy.c	2009-02-16 15:19:57.569077198 +0200
@@ -16,6 +16,8 @@
 
 /* Extracted from cp.c and librarified by Jim Meyering.  */
 
+/* Progress bar support added by Miika Pekkarinen. miipekk@ihme.org */
+
 #include <config.h>
 #include <stdio.h>
 #include <assert.h>
@@ -29,6 +31,10 @@
 # include <priv.h>
 #endif
 
+#ifdef GWINSZ_IN_SYS_IOCTL
+# include <sys/ioctl.h>
+#endif
+
 #include "system.h"
 #include "acl.h"
 #include "backupfile.h"
@@ -54,6 +60,9 @@
 #include "write-any-file.h"
 #include "areadlink.h"
 #include "yesno.h"
+#include "xstrtol.h"
+#include "human.h"
+#include "quotearg.h"
 
 #if USE_XATTR
 # include <stdarg.h>
@@ -99,6 +108,8 @@
 /* Initial size of the cp.dest_info hash table.  */
 #define DEST_INFO_INITIAL_CAPACITY 61
 
+#define SAMPLE_MAX 10
+
 static bool copy_internal (char const *src_name, char const *dst_name,
 			   bool new_dst, dev_t device,
 			   struct dir_list *ancestors,
@@ -406,6 +417,31 @@
   return lchmod (name, mode);
 }
 
+/* Shorten a string '/long path/long file' to 'long fi...'
+   Also adds padding bytes to end of the string if necessary */
+char *shorten_name(const char *str, size_t max_width)
+{
+  char *shortname;
+  const char *filename;
+  size_t len;
+
+  filename = base_name (str);
+  len = strlen(filename);
+  shortname = (char *) xmalloc (max_width + 1);
+  strncpy (shortname, filename, max_width);
+  shortname[max_width] = '\0';
+  if (len > max_width)
+    {
+      memset(shortname + max_width - 3, '.', 3);
+    }
+  else
+    {
+      memset(shortname + len, ' ', max_width - len);
+    }
+
+  return shortname;
+}
+
 /* Copy a regular file from SRC_NAME to DST_NAME.
    If the source file contains holes, copies holes and blocks of zeros
    in the source file as holes in the destination file.
@@ -434,6 +470,19 @@
   struct stat sb;
   struct stat src_open_sb;
   bool return_val = true;
+  time_t t_start;
+  time_t t_last;
+  time_t t_now;
+  off_t last_bytes = 0;
+  int progress_bar_printed = 0;
+  char *shortname = NULL;
+  off_t sample_window[SAMPLE_MAX];
+  off_t sample_sum = 0;
+  int sample_count = 0;
+  long int line_length = 0;
+#ifdef TIOCGWINSZ
+  struct winsize ws;
+#endif
 
   source_desc = open (src_name,
 		      (O_RDONLY | O_BINARY
@@ -557,6 +606,110 @@
 		  goto close_src_desc;
 		}
 	    }
+
+      time (&t_now);
+
+      /* Progress bar stuff */
+      if (! x->pbar_show || t_now - t_start < x->pbar_delay)
+	{
+	  continue;
+	}
+
+      if (! progress_bar_printed)
+	{
+	  /* Column width check code copied from ls.c */
+	  char const *p = getenv ("COLUMNS");
+	  if (p && *p)
+	    {
+	      long int tmp_long;
+	      if (xstrtol (p, NULL, 0, &tmp_long, NULL) == LONGINT_OK
+		  && 0 < tmp_long && tmp_long <= INT_MAX)
+		{
+		  line_length = tmp_long;
+		}
+	      else
+		{
+		  error (0, 0,
+			 _("ignoring invalid width in environment \
+			 variable COLUMNS: %s"),
+			 quotearg (p));
+		}
+	    }
+
+#ifdef TIOCGWINSZ
+	  if (ioctl (STDOUT_FILENO, TIOCGWINSZ, &ws) != -1 && ws.ws_col != 0)
+	    {
+	      line_length = ws.ws_col;
+	    }
+#endif
+	  if (line_length < 50)
+	    {
+	      continue;
+	    }
+
+	  /* Take a short filename for progress bar */
+	  shortname = shorten_name(src_name, line_length - 48);
+	  progress_bar_printed = 1;
+        }
+
+      if (t_now == t_last)
+        {
+          continue;
+        }
+
+      if (sample_count == SAMPLE_MAX)
+        {
+          int i;
+
+          sample_sum -= sample_window[0];
+          for (i = 0; i < SAMPLE_MAX - 1; i++)
+	    {
+	      sample_window[i] = sample_window[i + 1];
+	    }
+	}
+      else
+	{
+	  sample_count++;
+	}
+
+      {
+	char str_size[LONGEST_HUMAN_READABLE + 1];
+	char str_speed[LONGEST_HUMAN_READABLE + 1];
+	char etabuf[64];
+	time_t t_temp;
+
+	sample_window[sample_count - 1] = (n_read_total - last_bytes) /
+	                                  (t_now - t_last);
+	sample_sum += sample_window[sample_count - 1];
+
+	/* Calculate the remaining time */
+	t_temp = (src_open_sb.st_size - n_read_total) / (sample_sum / sample_count);
+
+	/* Don't print the progress bar if the estimated remaining
+	   time is low. */
+	if (progress_bar_printed == 1 && t_temp < x->pbar_min_est)
+	  {
+	    continue;
+	  }
+	progress_bar_printed = 2;
+
+	strftime(etabuf, sizeof etabuf, "%H:%M.%S", 
+	         gmtime(&t_temp));
+	printf (_("%s | %3lu%% | %9s | %9s/s | ETA %s\r"), shortname,
+	        (unsigned long)(n_read_total * 100 / src_open_sb.st_size),
+	        human_readable(src_open_sb.st_size, str_size, human_autoscale|human_base_1024|human_space_before_unit|human_SI|human_B, 1, 1),
+	        human_readable(sample_sum / sample_count, str_speed, human_autoscale|human_base_1024|human_space_before_unit|human_SI|human_B, 1, 1),
+	        etabuf);
+	fflush (stdout);
+	t_last = t_now;
+	last_bytes = n_read_total;
+      }
+    }
+
+  /* Print a newline if progress bar is enabled and has been shown */
+  if (progress_bar_printed == 2)
+    {
+      printf ("%s | 100%%\n", shortname);
 	}
     }
   else
@@ -645,6 +798,10 @@
     buf_alloc = xmalloc (buf_size + buf_alignment_slop);
     buf = ptr_align (buf_alloc, buf_alignment);
 
+    /* for progressbar */
+    time (&t_start);
+    t_last = t_start;
+
     for (;;)
       {
 	word *wp = NULL;
@@ -823,6 +980,11 @@
       return_val = false;
     }
 
+  if (shortname != NULL)
+    {
+      free (shortname);
+    }
+
   free (buf_alloc);
   free (name_alloc);
   return return_val;
diff -Nur coreutils-6.12-old/src/copy.h coreutils-6.12/src/copy.h
--- coreutils-6.12-old/src/copy.h	2009-02-16 15:17:20.745201580 +0200
+++ coreutils-6.12/src/copy.h	2009-02-16 15:17:31.799326897 +0200
@@ -196,6 +196,16 @@
   /* If true, display the names of the files before copying them. */
   bool verbose;
 
+  /* If true, display a progress bar when the following conditions are
+   * met:
+     - pbar_delay defines how many seconds to wait before considering to
+       display the progress bar
+     - pbar_min_est defines how many seconds estimated operation complete
+       time should be at least to show the progress bar. */
+  bool pbar_show;
+  int pbar_delay;
+  int pbar_min_est;
+
   /* If true, stdin is a tty.  */
   bool stdin_tty;
 
diff -Nur coreutils-6.12-old/src/cp.c coreutils-6.12/src/cp.c
--- coreutils-6.12-old/src/cp.c	2009-02-16 15:17:20.745201580 +0200
+++ coreutils-6.12/src/cp.c	2009-02-16 15:18:37.218076983 +0200
@@ -88,6 +88,14 @@
 /* Initial number of entries in the inode hash table.  */
 #define INITIAL_ENTRY_TAB_SIZE 70
 
+/* Initial settings for progress bar when it's enabled.
+   PROGRESS_DELAY defines how many seconds to wait before even
+   considering to display a proggress bar.
+   PROGRESS_MIN_EST defines how many seconds estimated operation
+   complete time should be at least to show the progress bar. */
+#define PROGRESS_DELAY    5
+#define PROGRESS_MIN_EST  5
+
 /* The invocation name of this program.  */
 char *program_name;
 
@@ -130,6 +138,7 @@
   {"copy-contents", no_argument, NULL, COPY_CONTENTS_OPTION},
   {"dereference", no_argument, NULL, 'L'},
   {"force", no_argument, NULL, 'f'},
+  {"progress", no_argument, NULL, 'g'},
   {"interactive", no_argument, NULL, 'i'},
   {"link", no_argument, NULL, 'l'},
   {"no-dereference", no_argument, NULL, 'P'},
@@ -186,6 +195,8 @@
       fputs (_("\
   -f, --force                  if an existing destination file cannot be\n\
                                  opened, remove it and try again\n\
+  -g, --progress               show a progress bar if operation is going to\n\
+                                 take a long time\n\
   -i, --interactive            prompt before overwrite\n\
   -H                           follow command-line symbolic links in SOURCE\n\
 "), stdout);
@@ -799,6 +810,11 @@
      But POSIX requires it.  */
   x->open_dangling_dest_symlink = getenv ("POSIXLY_CORRECT") != NULL;
 
+  /* for progressbar */
+  x->pbar_show = false;
+  x->pbar_delay = PROGRESS_DELAY;
+  x->pbar_min_est = PROGRESS_MIN_EST;
+
   x->dest_info = NULL;
   x->src_info = NULL;
 }
@@ -921,7 +937,7 @@
      we'll actually use backup_suffix_string.  */
   backup_suffix_string = getenv ("SIMPLE_BACKUP_SUFFIX");
 
-  while ((c = getopt_long (argc, argv, "abdfHilLprst:uvxPRS:T",
+  while ((c = getopt_long (argc, argv, "abdfgHilLprst:uvxPRS:T",
 			   long_opts, NULL))
 	 != -1)
     {
@@ -981,6 +997,10 @@
 	  x.dereference = DEREF_NEVER;
 	  break;
 
+	case 'g':
+	  x.pbar_show = true;
+	  break;
+
 	case NO_PRESERVE_ATTRIBUTES_OPTION:
 	  decode_preserve_arg (optarg, &x, false);
 	  break;
diff -Nur coreutils-6.12-old/src/mv.c coreutils-6.12/src/mv.c
--- coreutils-6.12-old/src/mv.c	2009-02-16 15:17:20.745201580 +0200
+++ coreutils-6.12/src/mv.c	2009-02-16 15:17:31.801242183 +0200
@@ -48,6 +48,14 @@
 /* Initial number of entries in the inode hash table.  */
 #define INITIAL_ENTRY_TAB_SIZE 70
 
+/* Initial settings for progress bar when it's enabled.
+   PROGRESS_DELAY defines how many seconds to wait before even
+   considering to display a proggress bar.
+   PROGRESS_MIN_EST defines how many seconds estimated operation
+   complete time should be at least to show the progress bar. */
+#define PROGRESS_DELAY    5
+#define PROGRESS_MIN_EST  5
+
 /* For long options that have no equivalent short option, use a
    non-character as a pseudo short option, starting with CHAR_MAX + 1.  */
 enum
@@ -78,6 +86,7 @@
 {
   {"backup", optional_argument, NULL, 'b'},
   {"force", no_argument, NULL, 'f'},
+  {"progress", no_argument, NULL, 'g'},
   {"interactive", no_argument, NULL, 'i'},
   {"no-target-directory", no_argument, NULL, 'T'},
   {"reply", required_argument, NULL, REPLY_OPTION}, /* Deprecated 2005-07-03,
@@ -106,6 +115,10 @@
 
   x->verbose = false;
 
+  x->pbar_show = false;
+  x->pbar_delay = PROGRESS_DELAY;
+  x->pbar_min_est = PROGRESS_MIN_EST;
+
   /* Since this program may well have to process additional command
      line arguments after any call to `rm', that function must preserve
      the initial working directory, in case one of those is a
@@ -150,6 +163,10 @@
   x->mode = 0;
   x->stdin_tty = isatty (STDIN_FILENO);
 
+  x->pbar_show = false;
+  x->pbar_delay = PROGRESS_DELAY;
+  x->pbar_min_est = PROGRESS_MIN_EST;
+
   x->open_dangling_dest_symlink = false;
   x->update = false;
   x->verbose = false;
@@ -315,6 +332,8 @@
       --backup[=CONTROL]       make a backup of each existing destination file\n\
   -b                           like --backup but does not accept an argument\n\
   -f, --force                  do not prompt before overwriting\n\
+  -g, --progress               show a progress bar if operation is going to\n\
+                                 take a long time\n\
   -i, --interactive            prompt before overwrite\n\
 "), stdout);
       fputs (_("\
@@ -378,7 +397,7 @@
      we'll actually use backup_suffix_string.  */
   backup_suffix_string = getenv ("SIMPLE_BACKUP_SUFFIX");
 
-  while ((c = getopt_long (argc, argv, "bfit:uvS:T", long_options, NULL))
+  while ((c = getopt_long (argc, argv, "bfgit:uvS:T", long_options, NULL))
 	 != -1)
     {
       switch (c)
@@ -391,6 +410,9 @@
 	case 'f':
 	  x.interactive = I_ALWAYS_YES;
 	  break;
+	case 'g':
+	  x.pbar_show = true;
+	  break;
 	case 'i':
 	  x.interactive = I_ASK_USER;
 	  break;
diff -Nur coreutils-6.12-old/src/remove.h coreutils-6.12/src/remove.h
--- coreutils-6.12-old/src/remove.h	2009-02-16 15:17:20.749201547 +0200
+++ coreutils-6.12/src/remove.h	2009-02-16 15:17:31.801242183 +0200
@@ -59,6 +59,16 @@
   /* If true, display the name of each file removed.  */
   bool verbose;
 
+  /* If true, display a progress bar when the following conditions are
+   * met:
+     - pbar_delay defines how many seconds to wait before considering to
+       display the progress bar
+     - pbar_min_est defines how many seconds estimated operation complete
+       time should be at least to show the progress bar. */
+  bool pbar_show;
+  int pbar_delay;
+  int pbar_min_est;
+
   /* If true, treat the failure by the rm function to restore the
      current working directory as a fatal error.  I.e., if this field
      is true and the rm function cannot restore cwd, it must exit with
