From d8132113b08e30c1f00f0dedca76b5a02e8816ee Mon Sep 17 00:00:00 2001
From: Michael Meeks <michael.meeks@novell.com>
Date: Tue, 2 Nov 2010 20:46:47 +0000
Subject: [PATCH 09/34] split app options from render options, and propagate

---
 pybootchartgui/batch.py |   10 ++++++----
 pybootchartgui/draw.py  |   20 ++++++++++++--------
 pybootchartgui/gui.py   |   18 +++++++++---------
 3 files changed, 27 insertions(+), 21 deletions(-)

diff --git a/pybootchartgui/batch.py b/pybootchartgui/batch.py
index 31eb70d..8645d2b 100644
--- a/pybootchartgui/batch.py
+++ b/pybootchartgui/batch.py
@@ -15,8 +15,9 @@
 
 import cairo
 import draw
+from draw import RenderOptions
 
-def render(writer, trace, options, filename):
+def render(writer, trace, app_options, filename):
     handlers = {
         "png": (lambda w, h: cairo.ImageSurface(cairo.FORMAT_ARGB32, w, h), \
                 lambda sfc: sfc.write_to_png(filename)),
@@ -24,17 +25,18 @@ def render(writer, trace, options, filename):
         "svg": (lambda w, h: cairo.SVGSurface(filename, w, h), lambda sfc: 0)
     }
 
-    if options.format is None:
+    if app_options.format is None:
         fmt = filename.rsplit('.', 1)[1]
     else:
-        fmt = options.format
+        fmt = app_options.format
 
     if not (fmt in handlers):
         writer.error ("Unknown format '%s'." % fmt)
         return 10
 
     make_surface, write_surface = handlers[fmt]
-    (w, h) = draw.extents (1.0, trace)
+    options = RenderOptions (app_options)
+    (w, h) = draw.extents (options, 1.0, trace)
     w = max (w, draw.MIN_IMG_W)
     surface = make_surface (w, h)
     ctx = cairo.Context (surface)
diff --git a/pybootchartgui/draw.py b/pybootchartgui/draw.py
index d42e14a..c72b2d9 100644
--- a/pybootchartgui/draw.py
+++ b/pybootchartgui/draw.py
@@ -20,8 +20,12 @@ import re
 import random
 import colorsys
 
-# should we render a cumulative CPU time chart
-WITH_CUMULATIVE_CHART = True
+class RenderOptions:
+	def __init__(self, app_options):
+		# should we render a cumulative CPU time chart
+		self.cumulative = True
+		self.kernel_only = False
+		self.app_options = app_options
 
 # Process tree background color.
 BACK_COLOR = (1.0, 1.0, 1.0, 1.0)
@@ -257,10 +261,10 @@ MIN_IMG_W = 800
 CUML_HEIGHT = 1000
 OPTIONS = None
 
-def extents(xscale, trace):
+def extents(options, xscale, trace):
 	w = int (trace.proc_tree.duration * sec_w_base * xscale / 100) + 2*off_x
 	h = proc_h * trace.proc_tree.num_proc + header_h + 2 * off_y
-	if trace.proc_tree.taskstats and WITH_CUMULATIVE_CHART:
+	if trace.proc_tree.taskstats and options.cumulative:
 		h += CUML_HEIGHT + 4 * off_y
 	return (w, h)
 
@@ -275,9 +279,9 @@ def clip_visible(clip, rect):
 # Render the chart.
 #
 def render(ctx, options, xscale, trace):
-	(w, h) = extents (xscale, trace)
+	(w, h) = extents (options, xscale, trace)
 	global OPTIONS
-	OPTIONS = options
+	OPTIONS = options.app_options
 
 	proc_tree = trace.proc_tree
 
@@ -377,7 +381,7 @@ def render(ctx, options, xscale, trace):
 
 	# draw process boxes
 	proc_height = h
-	if proc_tree.taskstats and WITH_CUMULATIVE_CHART:
+	if proc_tree.taskstats and options.cumulative:
 		proc_height -= CUML_HEIGHT
 
 	draw_process_bar_chart(ctx, clip, trace.proc_tree,
@@ -388,7 +392,7 @@ def render(ctx, options, xscale, trace):
 	draw_text(ctx, SIGNATURE, SIG_COLOR, off_x + 5, proc_height - 8)
 
 #	draw a cumulative CPU time per-application graph
-	if proc_tree.taskstats and WITH_CUMULATIVE_CHART:
+	if proc_tree.taskstats and options.cumulative:
 	        cuml_rect = (off_x, curr_y + off_y, w, CUML_HEIGHT - off_y * 2)
 		if clip_visible (clip, cuml_rect):
 			draw_cuml_graph(ctx, proc_tree, cuml_rect, duration, sec_w)
diff --git a/pybootchartgui/gui.py b/pybootchartgui/gui.py
index 6bff47d..c8a1adf 100644
--- a/pybootchartgui/gui.py
+++ b/pybootchartgui/gui.py
@@ -17,8 +17,8 @@ import gobject
 import gtk
 import gtk.gdk
 import gtk.keysyms
-
 import draw
+from draw import RenderOptions
 
 class PyBootchartWidget(gtk.DrawingArea):
 	__gsignals__ = {
@@ -28,11 +28,11 @@ class PyBootchartWidget(gtk.DrawingArea):
 		'set-scroll-adjustments' : (gobject.SIGNAL_RUN_LAST, gobject.TYPE_NONE, (gtk.Adjustment, gtk.Adjustment))
 	}
 
-	def __init__(self, trace, options):
+	def __init__(self, trace, app_options):
 		gtk.DrawingArea.__init__(self)
 
 		self.trace = trace
-		self.options = options
+		self.options = RenderOptions (app_options)
 
 		self.set_flags(gtk.CAN_FOCUS)
 
@@ -52,7 +52,7 @@ class PyBootchartWidget(gtk.DrawingArea):
 		self.xscale = 1.0
                 self.x, self.y = 0.0, 0.0
 
-		self.chart_width, self.chart_height = draw.extents(self.xscale, self.trace)
+		self.chart_width, self.chart_height = draw.extents(self.options, self.xscale, self.trace)
 		self.hadj = None
 		self.vadj = None
 		self.hadj_changed_signal_id = None
@@ -96,8 +96,8 @@ class PyBootchartWidget(gtk.DrawingArea):
 	def set_xscale(self, xscale):
 	    old_mid_x = self.x + self.hadj.page_size / 2
 	    self.xscale = xscale
-	    self.chart_width, self.chart_height = draw.extents(self.xscale, self.trace)
-	    new_x = old_mid_x 
+	    self.chart_width, self.chart_height = draw.extents(self.options, self.xscale, self.trace)
+	    new_x = old_mid_x
 	    self.zoom_image (self.zoom_ratio)
 
 	def on_expand(self, action):
@@ -120,7 +120,7 @@ class PyBootchartWidget(gtk.DrawingArea):
 	    self.set_xscale(1.0)
 
         def show_toggled(self, button):
-            self.options.show_all = button.get_property ('active')
+            self.options.app_options.show_all = button.get_property ('active')
 	    self.queue_draw()
 
         POS_INCREMENT = 100
@@ -257,7 +257,7 @@ class PyBootchartWindow(gtk.Window):
 	</ui>
 	'''
 
-	def __init__(self, trace, options):
+	def __init__(self, trace, app_options):
 		gtk.Window.__init__(self)
 
 		window = self
@@ -266,7 +266,7 @@ class PyBootchartWindow(gtk.Window):
 		vbox = gtk.VBox()
 		window.add(vbox)
 
-		self.widget = PyBootchartWidget(trace, options)
+		self.widget = PyBootchartWidget(trace, app_options)
 
 		# Create a UIManager instance
 		uimanager = self.uimanager = gtk.UIManager()
-- 
1.7.3.1

