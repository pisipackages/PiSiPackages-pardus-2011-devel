From 8f324e100633f26315f9d3577eedb5a30647352d Mon Sep 17 00:00:00 2001
From: Michael Meeks <michael.meeks@novell.com>
Date: Mon, 20 Sep 2010 10:08:06 +0100
Subject: [PATCH 01/34] Get version reporting right - bug 11.

---
 Makefile                  |   10 ++-
 pybootchartgui/main.py    |  161 --------------------------------------------
 pybootchartgui/main.py.in |  164 +++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 171 insertions(+), 164 deletions(-)
 delete mode 100644 pybootchartgui/main.py
 create mode 100644 pybootchartgui/main.py.in

diff --git a/Makefile b/Makefile
index eb5bd9a..9e46676 100644
--- a/Makefile
+++ b/Makefile
@@ -17,7 +17,7 @@ COLLECTOR = \
 	collector/tasks-netlink.o \
 	collector/dump.o
 
-all: bootchart-collector
+all: bootchart-collector pybootchartgui/main.py
 
 %.o:%.c
 	$(CC) $(CFLAGS) -pthread -DVERSION=\"$(VER)\" -c $^ -o $@
@@ -25,7 +25,10 @@ all: bootchart-collector
 bootchart-collector: $(COLLECTOR)
 	$(CC) -pthread -Icollector -o $@ $^
 
-py-install-compile:
+pybootchartgui/main.py: pybootchartgui/main.py.in
+	sed -s "s/@VER@/$(VER)/g" $^ > $@
+
+py-install-compile: pybootchartgui/main.py
 	install -d $(DESTDIR)$(PY_SITEDIR)/pybootchartgui
 	cp pybootchartgui/*.py $(DESTDIR)$(PY_SITEDIR)/pybootchartgui
 	install -D -m 755 pybootchartgui.py $(DESTDIR)$(BINDIR)/pybootchartgui
@@ -44,7 +47,8 @@ install-collector: all install-chroot
 install: all py-install-compile install-collector
 
 clean:
-	-rm -f bootchart-collector bootchart-collector-dynamic collector/*.o
+	-rm -f bootchart-collector bootchart-collector-dynamic \
+	collector/*.o pybootchartgui/main.py
 
 dist:
 	COMMIT_HASH=`git show-ref -s -h | head -n 1` ; \
diff --git a/pybootchartgui/main.py b/pybootchartgui/main.py
deleted file mode 100644
index 68c7c03..0000000
--- a/pybootchartgui/main.py
+++ /dev/null
@@ -1,161 +0,0 @@
-#  This file is part of pybootchartgui.
-
-#  pybootchartgui is free software: you can redistribute it and/or modify
-#  it under the terms of the GNU General Public License as published by
-#  the Free Software Foundation, either version 3 of the License, or
-#  (at your option) any later version.
-
-#  pybootchartgui is distributed in the hope that it will be useful,
-#  but WITHOUT ANY WARRANTY; without even the implied warranty of
-#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-#  GNU General Public License for more details.
-
-#  You should have received a copy of the GNU General Public License
-#  along with pybootchartgui. If not, see <http://www.gnu.org/licenses/>.
-
-import sys
-import os
-import optparse
-
-import parsing
-import gui
-import batch
-
-def _mk_options_parser():
-	"""Make an options parser."""
-	usage = "%prog [options] PATH, ..., PATH"
-	version = "%prog v0.0.0"
-	parser = optparse.OptionParser(usage, version=version)
-	parser.add_option("-i", "--interactive", action="store_true", dest="interactive", default=False, 
-			  help="start in active mode")
-	parser.add_option("-f", "--format", dest="format", default = None,
-			  help="image format (...); default format ...")
-	parser.add_option("-o", "--output", dest="output", metavar="PATH", default="bootchart.png",
-			  help="output path (file or directory) where charts are stored")
-	parser.add_option("-n", "--no-prune", action="store_false", dest="prune", default=True,
-			  help="do not prune the process tree")
-	parser.add_option("-q", "--quiet", action="store_true", dest="quiet", default=False,
-			  help="suppress informational messages")
-	parser.add_option("-t", "--boot-time", action="store_true", dest="boottime", default=False,
-			  help="only display the boot time of the boot in text format (stdout)")	
-	parser.add_option("--very-quiet", action="store_true", dest="veryquiet", default=False,
-			  help="suppress all messages except errors")
-	parser.add_option("--verbose", action="store_true", dest="verbose", default=False,
-			  help="print all messages")
-	parser.add_option("--profile", action="store_true", dest="profile", default=False,
-			  help="profile rendering of chart (only useful when in batch mode indicated by -f)")
-	parser.add_option("--show-pid", action="store_true", dest="show_pid", default=False,
-			  help="show process ids in the bootchart as 'processname [pid]'")
-	parser.add_option("--show-all", action="store_true", dest="show_all", default=False,
-			  help="show all process information in the bootchart as '/process/path/exe [pid] [args]'")
-	parser.add_option("--crop-after", dest="crop_after", metavar="PROCESS", default=None,
-			  help="crop chart when idle after PROCESS is started")
-	parser.add_option("--annotate", action="append", dest="annotate", metavar="PROCESS", default=None,
-			  help="annotate position where PROCESS is started; can be specified multiple times. " +
-			       "To create a single annotation when any one of a set of processes is started, use commas to separate the names")
-	parser.add_option("--annotate-file", dest="annotate_file", metavar="FILENAME", default=None,
-			  help="filename to write annotation points to")
-	return parser
-
-class Writer:
-	def __init__(self, write, options):
-		self.write = write
-		self.options = options
-		
-	def error(self, msg):
-		self.write(msg)
-
-	def warn(self, msg):
-		if not self.options.quiet:
-			self.write(msg)
-
-	def info(self, msg):
-		if self.options.verbose:
-			self.write(msg)
-
-	def status(self, msg):
-		if not self.options.quiet:
-			self.write(msg)
-
-def _mk_writer(options):
-	def write(s):
-		print s
-	return Writer(write, options)
-	
-def _get_filename(paths, options):
-	"""Construct a usable filename for outputs based on the paths and options given on the commandline."""
-	dname = ""
-	fname = "bootchart"
-	if options.output and not(os.path.isdir(options.output)):
-		return options.output
-	if options.output:
-		dname = options.output
-	if len (paths) == 1:
-		path = paths[0]
-		if os.path.isdir(path):
-			fname = os.path.split(path)[-1]
-		elif os.path.splitext(path)[1] in [".tar", ".tgz", ".tar.gz"]:
-			fname = os.path.splitext(path)[0]
-	return os.path.join (dname, fname + "." + options.format)
-
-def main(argv=None):
-	try:
-		if argv is None:
-			argv = sys.argv[1:]
-	
-		parser = _mk_options_parser()
-		options, args = parser.parse_args(argv)
-		writer = _mk_writer(options)
-
-		if len(args) == 0:
-			print "No path given, trying /var/log/bootchart.tgz"
-			args = [ "/var/log/bootchart.tgz" ]
-
-
-		res = parsing.parse(writer, args, options.prune,
-				    options.crop_after, options.annotate)
-		
-		if options.interactive or options.output == None:
-			gui.show(res, options)
-		elif options.boottime:
-			import math
-			proc_tree = res[3]
-			if proc_tree.idle:
-			    duration = proc_tree.idle
-			else:
-			    duration = proc_tree.duration
-			dur = duration / 100.0
-			print '%02d:%05.2f' % (math.floor(dur/60), dur - 60 * math.floor(dur/60))
-		else:
-			if options.annotate_file:
-				f = open (options.annotate_file, "w")
-				try:
-					for time in res[4]:
-						if time is not None:
-							# output as ms
-							print >> f, time * 10
-						else:
-							print >> f
-				finally:
-					f.close()
-			filename = _get_filename(args, options)
-			def render():
-				batch.render(writer, res, options, filename)
-			if options.profile:
-				import cProfile
-				import pstats
-				profile = '%s.prof' % os.path.splitext(filename)[0]
-				cProfile.runctx('render()', globals(), locals(), profile)
-				p = pstats.Stats(profile)
-				p.strip_dirs().sort_stats('time').print_stats(20)
-			else:
-				render()
-
-		return 0
-	except parsing.ParseError, ex:
-		print("Parse error: %s" % ex)
-		return 2
-
-
-if __name__ == '__main__':
-	sys.exit(main())
diff --git a/pybootchartgui/main.py.in b/pybootchartgui/main.py.in
new file mode 100644
index 0000000..d1387f5
--- /dev/null
+++ b/pybootchartgui/main.py.in
@@ -0,0 +1,164 @@
+#
+# ***********************************************************************
+#  Warning: This file is auto-generated from main.py.in - edit it there.
+# ***********************************************************************
+#
+#  pybootchartgui is free software: you can redistribute it and/or modify
+#  it under the terms of the GNU General Public License as published by
+#  the Free Software Foundation, either version 3 of the License, or
+#  (at your option) any later version.
+
+#  pybootchartgui is distributed in the hope that it will be useful,
+#  but WITHOUT ANY WARRANTY; without even the implied warranty of
+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+#  GNU General Public License for more details.
+
+#  You should have received a copy of the GNU General Public License
+#  along with pybootchartgui. If not, see <http://www.gnu.org/licenses/>.
+
+import sys
+import os
+import optparse
+
+import parsing
+import gui
+import batch
+
+def _mk_options_parser():
+	"""Make an options parser."""
+	usage = "%prog [options] PATH, ..., PATH"
+	version = "%prog v@VER@"
+	parser = optparse.OptionParser(usage, version=version)
+	parser.add_option("-i", "--interactive", action="store_true", dest="interactive", default=False, 
+			  help="start in active mode")
+	parser.add_option("-f", "--format", dest="format", default = None,
+			  help="image format (...); default format ...")
+	parser.add_option("-o", "--output", dest="output", metavar="PATH", default="bootchart.png",
+			  help="output path (file or directory) where charts are stored")
+	parser.add_option("-n", "--no-prune", action="store_false", dest="prune", default=True,
+			  help="do not prune the process tree")
+	parser.add_option("-q", "--quiet", action="store_true", dest="quiet", default=False,
+			  help="suppress informational messages")
+	parser.add_option("-t", "--boot-time", action="store_true", dest="boottime", default=False,
+			  help="only display the boot time of the boot in text format (stdout)")	
+	parser.add_option("--very-quiet", action="store_true", dest="veryquiet", default=False,
+			  help="suppress all messages except errors")
+	parser.add_option("--verbose", action="store_true", dest="verbose", default=False,
+			  help="print all messages")
+	parser.add_option("--profile", action="store_true", dest="profile", default=False,
+			  help="profile rendering of chart (only useful when in batch mode indicated by -f)")
+	parser.add_option("--show-pid", action="store_true", dest="show_pid", default=False,
+			  help="show process ids in the bootchart as 'processname [pid]'")
+	parser.add_option("--show-all", action="store_true", dest="show_all", default=False,
+			  help="show all process information in the bootchart as '/process/path/exe [pid] [args]'")
+	parser.add_option("--crop-after", dest="crop_after", metavar="PROCESS", default=None,
+			  help="crop chart when idle after PROCESS is started")
+	parser.add_option("--annotate", action="append", dest="annotate", metavar="PROCESS", default=None,
+			  help="annotate position where PROCESS is started; can be specified multiple times. " +
+			       "To create a single annotation when any one of a set of processes is started, use commas to separate the names")
+	parser.add_option("--annotate-file", dest="annotate_file", metavar="FILENAME", default=None,
+			  help="filename to write annotation points to")
+	return parser
+
+class Writer:
+	def __init__(self, write, options):
+		self.write = write
+		self.options = options
+		
+	def error(self, msg):
+		self.write(msg)
+
+	def warn(self, msg):
+		if not self.options.quiet:
+			self.write(msg)
+
+	def info(self, msg):
+		if self.options.verbose:
+			self.write(msg)
+
+	def status(self, msg):
+		if not self.options.quiet:
+			self.write(msg)
+
+def _mk_writer(options):
+	def write(s):
+		print s
+	return Writer(write, options)
+	
+def _get_filename(paths, options):
+	"""Construct a usable filename for outputs based on the paths and options given on the commandline."""
+	dname = ""
+	fname = "bootchart"
+	if options.output and not(os.path.isdir(options.output)):
+		return options.output
+	if options.output:
+		dname = options.output
+	if len (paths) == 1:
+		path = paths[0]
+		if os.path.isdir(path):
+			fname = os.path.split(path)[-1]
+		elif os.path.splitext(path)[1] in [".tar", ".tgz", ".tar.gz"]:
+			fname = os.path.splitext(path)[0]
+	return os.path.join (dname, fname + "." + options.format)
+
+def main(argv=None):
+	try:
+		if argv is None:
+			argv = sys.argv[1:]
+	
+		parser = _mk_options_parser()
+		options, args = parser.parse_args(argv)
+		writer = _mk_writer(options)
+
+		if len(args) == 0:
+			print "No path given, trying /var/log/bootchart.tgz"
+			args = [ "/var/log/bootchart.tgz" ]
+
+
+		res = parsing.parse(writer, args, options.prune,
+				    options.crop_after, options.annotate)
+		
+		if options.interactive or options.output == None:
+			gui.show(res, options)
+		elif options.boottime:
+			import math
+			proc_tree = res[3]
+			if proc_tree.idle:
+			    duration = proc_tree.idle
+			else:
+			    duration = proc_tree.duration
+			dur = duration / 100.0
+			print '%02d:%05.2f' % (math.floor(dur/60), dur - 60 * math.floor(dur/60))
+		else:
+			if options.annotate_file:
+				f = open (options.annotate_file, "w")
+				try:
+					for time in res[4]:
+						if time is not None:
+							# output as ms
+							print >> f, time * 10
+						else:
+							print >> f
+				finally:
+					f.close()
+			filename = _get_filename(args, options)
+			def render():
+				batch.render(writer, res, options, filename)
+			if options.profile:
+				import cProfile
+				import pstats
+				profile = '%s.prof' % os.path.splitext(filename)[0]
+				cProfile.runctx('render()', globals(), locals(), profile)
+				p = pstats.Stats(profile)
+				p.strip_dirs().sort_stats('time').print_stats(20)
+			else:
+				render()
+
+		return 0
+	except parsing.ParseError, ex:
+		print("Parse error: %s" % ex)
+		return 2
+
+
+if __name__ == '__main__':
+	sys.exit(main())
-- 
1.7.3.1

