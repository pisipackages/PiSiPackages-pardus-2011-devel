commit fcbd0dded1e02b435b421151fb6fcd78fe44b3d3
Author: Ozan Çağlayan <ozan@pardus.org.tr>
Date:   Mon Nov 8 14:39:05 2010 +0200

    plugins: Add ifcfg-pardus plugin
    
    Add ifcfg-pardus plugin for persistent hostname support in Pardus.

diff --git a/system-settings/plugins/Makefile.am b/system-settings/plugins/Makefile.am
index 5df57d5..948adb8 100644
--- a/system-settings/plugins/Makefile.am
+++ b/system-settings/plugins/Makefile.am
@@ -19,3 +19,7 @@ endif
 if TARGET_GENTOO
 SUBDIRS+=ifnet
 endif
+
+if TARGET_PARDUS
+SUBDIRS+=ifcfg-pardus
+endif
diff --git a/system-settings/plugins/ifcfg-pardus/Makefile.am b/system-settings/plugins/ifcfg-pardus/Makefile.am
new file mode 100644
index 0000000..ac42d23
--- /dev/null
+++ b/system-settings/plugins/ifcfg-pardus/Makefile.am
@@ -0,0 +1,26 @@
+
+pkglib_LTLIBRARIES = libnm-settings-plugin-ifcfg-pardus.la
+
+libnm_settings_plugin_ifcfg_pardus_la_SOURCES = \
+	plugin.c \
+	plugin.h
+
+libnm_settings_plugin_ifcfg_pardus_la_CPPFLAGS = \
+	$(GLIB_CFLAGS) \
+	$(GMODULE_CFLAGS) \
+	$(DBUS_CFLAGS) \
+	-DG_DISABLE_DEPRECATED \
+	-I${top_srcdir}/src/system-settings \
+	-I$(top_srcdir)/include \
+	-I$(top_srcdir)/libnm-util \
+	-I$(top_srcdir)/libnm-glib \
+	-DSYSCONFDIR=\"$(sysconfdir)\"
+
+libnm_settings_plugin_ifcfg_pardus_la_LDFLAGS = -module -avoid-version
+libnm_settings_plugin_ifcfg_pardus_la_LIBADD = \
+	$(top_builddir)/libnm-util/libnm-util.la \
+	$(top_builddir)/libnm-glib/libnm-glib.la \
+	$(GLIB_LIBS) \
+	$(GMODULE_LIBS) \
+	$(GIO_LIBS)
+
diff --git a/system-settings/plugins/ifcfg-pardus/plugin.c b/system-settings/plugins/ifcfg-pardus/plugin.c
new file mode 100644
index 0000000..fde42a4
--- /dev/null
+++ b/system-settings/plugins/ifcfg-pardus/plugin.c
@@ -0,0 +1,330 @@
+/* NetworkManager system settings service for Pardus
+ *
+ * Ozan Çağlayan <ozan@pardus.org.tr>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ */
+
+#include <config.h>
+#include <string.h>
+
+#include <gmodule.h>
+#include <glib-object.h>
+#include <gio/gio.h>
+
+#include "plugin.h"
+#include "nm-system-config-interface.h"
+
+#define IFCFG_PLUGIN_NAME "ifcfg-pardus"
+#define IFCFG_PLUGIN_INFO "(C) 2010 TUBITAK/UEKAE. To report bugs please use the NetworkManager mailing list."
+#define IFCFG_DIR SYSCONFDIR "/network"
+#define DHCPCD_CONF SYSCONFDIR "/dhcpcd.conf"
+#define HOSTNAME_FILE "/etc/env.d/01hostname"
+
+static void system_config_interface_init (NMSystemConfigInterface *system_config_interface_class);
+
+G_DEFINE_TYPE_EXTENDED (SCPluginIfcfg, sc_plugin_ifcfg, G_TYPE_OBJECT, 0,
+                        G_IMPLEMENT_INTERFACE (NM_TYPE_SYSTEM_CONFIG_INTERFACE,
+                                               system_config_interface_init))
+
+#define SC_PLUGIN_IFCFG_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), SC_TYPE_PLUGIN_IFCFG, SCPluginIfcfgPrivate))
+
+
+#define IFCFG_FILE_PATH_TAG "ifcfg-file-path"
+
+typedef struct {
+	GFileMonitor *hostname_monitor;
+	GFileMonitor *dhcp_monitor;
+	char *hostname;
+} SCPluginIfcfgPrivate;
+
+GQuark
+ifcfg_plugin_error_quark (void)
+{
+	static GQuark error_quark = 0;
+
+	if (G_UNLIKELY (error_quark == 0))
+		error_quark = g_quark_from_static_string ("ifcfg-plugin-error-quark");
+
+	return error_quark;
+}
+
+typedef void (*FileChangedFn) (gpointer user_data);
+
+typedef struct {
+	FileChangedFn callback;
+	gpointer user_data;
+} FileMonitorInfo;
+
+static void
+file_changed (GFileMonitor *monitor,
+		    GFile *file,
+		    GFile *other_file,
+		    GFileMonitorEvent event_type,
+		    gpointer user_data)
+{
+	FileMonitorInfo *info;
+
+	switch (event_type) {
+	case G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT:
+	case G_FILE_MONITOR_EVENT_DELETED:
+		info = (FileMonitorInfo *) user_data;
+		info->callback (info->user_data);
+		break;
+	default:
+		break;
+	}
+}
+
+static GFileMonitor *
+monitor_file_changes (const char *filename,
+				  FileChangedFn callback,
+				  gpointer user_data)
+{
+	GFile *file;
+	GFileMonitor *monitor;
+	FileMonitorInfo *info;
+
+	file = g_file_new_for_path (filename);
+	monitor = g_file_monitor_file (file, G_FILE_MONITOR_NONE, NULL, NULL);
+	g_object_unref (file);
+
+	if (monitor) {
+		info = g_new0 (FileMonitorInfo, 1);
+		info->callback = callback;
+		info->user_data = user_data;
+		g_object_weak_ref (G_OBJECT (monitor), (GWeakNotify) g_free, info);
+		g_signal_connect (monitor, "changed", G_CALLBACK (file_changed), info);
+	}
+
+	return monitor;
+}
+
+/* Search dhcpcd.conf for host_name option */
+static gboolean
+hostname_is_dynamic (void)
+{
+	GIOChannel *channel;
+	char *str = NULL;
+	gboolean dynamic = FALSE;
+
+	channel = g_io_channel_new_file (DHCPCD_CONF, "r", NULL);
+	if (!channel)
+		return dynamic;
+
+	while (g_io_channel_read_line (channel, &str, NULL, NULL, NULL) != G_IO_STATUS_EOF) {
+		if (g_str_has_prefix(str, "option") && g_strrstr(str, "host_name") != NULL) {
+			PLUGIN_PRINT(IFCFG_PLUGIN_NAME, "Found host_name option in %s, hostname is dynamic.", DHCPCD_CONF);
+			dynamic = TRUE;
+			break;
+		}
+		g_free (str);
+	}
+
+	g_io_channel_shutdown (channel, FALSE, NULL);
+	g_io_channel_unref (channel);
+
+	return dynamic;
+}
+
+static char *
+hostname_read ()
+{
+	GIOChannel *channel;
+
+	/* hostname is in HOSTNAME="xx" format */
+	char *hostname = NULL;
+	gchar **hostname_items;
+
+	channel = g_io_channel_new_file (HOSTNAME_FILE, "r", NULL);
+	if (channel) {
+		g_io_channel_read_line (channel, &hostname, NULL, NULL, NULL);
+		g_io_channel_shutdown (channel, FALSE, NULL);
+		g_io_channel_unref (channel);
+
+		if (hostname) {
+			hostname = g_strstrip (hostname);
+
+			/* Split HOSTNAME="2009" with =," delimiters */
+			hostname_items = g_strsplit_set(hostname, "=\"", -1);
+
+			/* Take the hostname value */
+			hostname = g_strdup(hostname_items[2]);
+
+			/* free the vector */
+			g_strfreev(hostname_items);
+		}
+	}
+
+	PLUGIN_PRINT(IFCFG_PLUGIN_NAME, "Hostname '%s' is read from %s", hostname, HOSTNAME_FILE);
+	return hostname;
+}
+
+static void
+hostname_changed (gpointer data)
+{
+	SCPluginIfcfgPrivate *priv = SC_PLUGIN_IFCFG_GET_PRIVATE (data);
+
+	g_free (priv->hostname);
+	if (hostname_is_dynamic ())
+		priv->hostname = NULL;
+	else
+		priv->hostname = hostname_read ();
+
+	g_object_notify (G_OBJECT (data), NM_SYSTEM_CONFIG_INTERFACE_HOSTNAME);
+}
+
+static void
+plugin_set_hostname (SCPluginIfcfg *plugin, const char *hostname)
+{
+	SCPluginIfcfgPrivate *priv = SC_PLUGIN_IFCFG_GET_PRIVATE (plugin);
+	GIOChannel *channel;
+
+	channel = g_io_channel_new_file (HOSTNAME_FILE, "w", NULL);
+	if (channel) {
+		g_io_channel_write_chars (channel, "HOSTNAME=\"", -1, NULL, NULL);
+		g_io_channel_write_chars (channel, hostname, -1, NULL, NULL);
+		g_io_channel_write_chars (channel, "\"\n", -1, NULL, NULL);
+		g_io_channel_shutdown (channel, TRUE, NULL);
+		g_io_channel_unref (channel);
+	}
+
+	g_free (priv->hostname);
+	priv->hostname = hostname ? g_strdup (hostname) : NULL;
+}
+
+static void
+init (NMSystemConfigInterface *config)
+{
+	SCPluginIfcfgPrivate *priv = SC_PLUGIN_IFCFG_GET_PRIVATE (config);
+
+	priv->hostname_monitor = monitor_file_changes (HOSTNAME_FILE, hostname_changed, config);
+	priv->dhcp_monitor = monitor_file_changes (DHCPCD_CONF, hostname_changed, config);
+
+	if (!hostname_is_dynamic ())
+		priv->hostname = hostname_read ();
+}
+
+static void
+sc_plugin_ifcfg_init (SCPluginIfcfg *self)
+{
+}
+
+static void
+dispose (GObject *object)
+{
+	SCPluginIfcfgPrivate *priv = SC_PLUGIN_IFCFG_GET_PRIVATE (object);
+
+	if (priv->dhcp_monitor)
+		g_object_unref (priv->dhcp_monitor);
+
+	if (priv->hostname_monitor)
+		g_object_unref (priv->hostname_monitor);
+
+	g_free (priv->hostname);
+
+	G_OBJECT_CLASS (sc_plugin_ifcfg_parent_class)->dispose (object);
+}
+
+static void
+get_property (GObject *object, guint prop_id,
+		    GValue *value, GParamSpec *pspec)
+{
+	switch (prop_id) {
+	case NM_SYSTEM_CONFIG_INTERFACE_PROP_NAME:
+		g_value_set_string (value, IFCFG_PLUGIN_NAME);
+		break;
+	case NM_SYSTEM_CONFIG_INTERFACE_PROP_INFO:
+		g_value_set_string (value, IFCFG_PLUGIN_INFO);
+		break;
+	case NM_SYSTEM_CONFIG_INTERFACE_PROP_CAPABILITIES:
+		g_value_set_uint (value, NM_SYSTEM_CONFIG_INTERFACE_CAP_MODIFY_HOSTNAME);
+		break;
+	case NM_SYSTEM_CONFIG_INTERFACE_PROP_HOSTNAME:
+		g_value_set_string (value, SC_PLUGIN_IFCFG_GET_PRIVATE (object)->hostname);
+		break;
+	default:
+		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+		break;
+	}
+}
+
+static void
+set_property (GObject *object, guint prop_id,
+		    const GValue *value, GParamSpec *pspec)
+{
+	const char *hostname;
+
+	switch (prop_id) {
+	case NM_SYSTEM_CONFIG_INTERFACE_PROP_HOSTNAME:
+		hostname = g_value_get_string (value);
+		if (hostname && strlen (hostname) < 1)
+			hostname = NULL;
+		plugin_set_hostname (SC_PLUGIN_IFCFG (object), hostname);
+		break;
+	default:
+		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
+		break;
+	}
+}
+
+static void
+sc_plugin_ifcfg_class_init (SCPluginIfcfgClass *req_class)
+{
+	GObjectClass *object_class = G_OBJECT_CLASS (req_class);
+
+	g_type_class_add_private (req_class, sizeof (SCPluginIfcfgPrivate));
+
+	object_class->get_property = get_property;
+	object_class->set_property = set_property;
+	object_class->dispose = dispose;
+
+	g_object_class_override_property (object_class,
+							    NM_SYSTEM_CONFIG_INTERFACE_PROP_NAME,
+							    NM_SYSTEM_CONFIG_INTERFACE_NAME);
+
+	g_object_class_override_property (object_class,
+							    NM_SYSTEM_CONFIG_INTERFACE_PROP_INFO,
+							    NM_SYSTEM_CONFIG_INTERFACE_INFO);
+
+	g_object_class_override_property (object_class,
+							    NM_SYSTEM_CONFIG_INTERFACE_PROP_CAPABILITIES,
+							    NM_SYSTEM_CONFIG_INTERFACE_CAPABILITIES);
+
+	g_object_class_override_property (object_class,
+							    NM_SYSTEM_CONFIG_INTERFACE_PROP_HOSTNAME,
+							    NM_SYSTEM_CONFIG_INTERFACE_HOSTNAME);
+}
+
+static void
+system_config_interface_init (NMSystemConfigInterface *system_config_interface_class)
+{
+	/* interface implementation */
+	system_config_interface_class->init = init;
+}
+
+G_MODULE_EXPORT GObject *
+nm_system_config_factory (void)
+{
+	static SCPluginIfcfg *singleton = NULL;
+
+	if (!singleton)
+		singleton = SC_PLUGIN_IFCFG (g_object_new (SC_TYPE_PLUGIN_IFCFG, NULL));
+	else
+		g_object_ref (singleton);
+
+	return G_OBJECT (singleton);
+}
diff --git a/system-settings/plugins/ifcfg-pardus/plugin.h b/system-settings/plugins/ifcfg-pardus/plugin.h
new file mode 100644
index 0000000..8fc848c
--- /dev/null
+++ b/system-settings/plugins/ifcfg-pardus/plugin.h
@@ -0,0 +1,51 @@
+/* NetworkManager system settings service for Pardus
+ *
+ * Ozan Çağlayan <ozan@pardus.org.tr>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ */
+
+#ifndef _PLUGIN_H_
+#define _PLUGIN_H_
+
+#include <glib-object.h>
+
+#define PLUGIN_NAME "ifcfg-pardus"
+
+#define SC_TYPE_PLUGIN_IFCFG            (sc_plugin_ifcfg_get_type ())
+#define SC_PLUGIN_IFCFG(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), SC_TYPE_PLUGIN_IFCFG, SCPluginIfcfg))
+#define SC_PLUGIN_IFCFG_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), SC_TYPE_PLUGIN_IFCFG, SCPluginIfcfgClass))
+#define SC_IS_PLUGIN_IFCFG(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SC_TYPE_PLUGIN_IFCFG))
+#define SC_IS_PLUGIN_IFCFG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((obj), SC_TYPE_PLUGIN_IFCFG))
+#define SC_PLUGIN_IFCFG_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), SC_TYPE_PLUGIN_IFCFG, SCPluginIfcfgClass))
+
+typedef struct _SCPluginIfcfg SCPluginIfcfg;
+typedef struct _SCPluginIfcfgClass SCPluginIfcfgClass;
+
+struct _SCPluginIfcfg {
+	GObject parent;
+};
+
+struct _SCPluginIfcfgClass {
+	GObjectClass parent;
+};
+
+GType sc_plugin_ifcfg_get_type (void);
+
+GQuark ifcfg_plugin_error_quark (void);
+
+#endif	/* _PLUGIN_H_ */
+
commit 9181b4533b3a8e5003b67dd632bf190ad0be6963
Author: Ozan Çağlayan <ozan@pardus.org.tr>
Date:   Mon Nov 8 14:42:41 2010 +0200

    configure.ac: Add ifcfg-pardus
    
    Add ifcfg-pardus to configure.ac

diff --git a/configure.ac b/configure.ac
index 54e1acf..543ba1c 100644
--- a/configure.ac
+++ b/configure.ac
@@ -545,6 +545,7 @@ system-settings/plugins/ifnet/tests/Makefile
 system-settings/plugins/ifcfg-rh/Makefile
 system-settings/plugins/ifcfg-rh/tests/Makefile
 system-settings/plugins/ifcfg-rh/tests/network-scripts/Makefile
+system-settings/plugins/ifcfg-pardus/Makefile
 system-settings/plugins/ifcfg-suse/Makefile
 system-settings/plugins/keyfile/Makefile
 system-settings/plugins/keyfile/tests/Makefile
