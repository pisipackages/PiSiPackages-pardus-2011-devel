commit c618616b416b1a7239639e39017b9750982da425
Author: Andrea Florio <andrea@opensuse.org>
Date:   Wed Jul 14 12:11:24 2010 +0200

    lock the screen when hybernate/suspend or switch user

diff --git a/lxsession-logout/lxsession-logout.c b/lxsession-logout/lxsession-logout.c
index 435216c..e524936 100644
--- a/lxsession-logout/lxsession-logout.c
+++ b/lxsession-logout/lxsession-logout.c
@@ -25,6 +25,7 @@
 #include <glib/gi18n.h>
 #include <sys/types.h>
 #include <sys/stat.h>
+#include <sys/wait.h>
 #include <fcntl.h>
 #include <limits.h>
 #include <signal.h>
@@ -73,6 +74,7 @@ typedef struct {
     int ltsp : 1;			/* Shutdown and reboot is accomplished via LTSP */
 } HandlerContext;
 
+static gboolean lock_screen(void);
 static gboolean verify_running(char * display_manager, char * executable);
 static void logout_clicked(GtkButton * button, HandlerContext * handler_context);
 static void change_root_property(GtkWidget* w, const char* prop_name, const char* value);
@@ -85,6 +87,52 @@ static void cancel_clicked(GtkButton * button, gpointer user_data);
 static GtkPositionType get_banner_position(void);
 static GdkPixbuf * get_background_pixbuf(void);
 
+/* Try to lock the screen, return TRUE on success, FALSE if no suitable
+ * screensaver was found or the screensaver command exited abnormally.
+ */
+static gboolean lock_screen(void)
+{
+    gchar *dummy;
+    gint exit_status;
+
+    if ((dummy = g_find_program_in_path("xscreensaver-command")) != NULL)
+    {
+        g_spawn_command_line_sync("xscreensaver-command -lock",
+                NULL,
+                NULL,
+                &exit_status,
+                NULL);
+    }
+    else if ((dummy = g_find_program_in_path("gnome-screensaver-command")) !=
+            NULL)
+    {
+        g_spawn_command_line_sync("gnome-screensaver-command --lock",
+                NULL,
+                NULL,
+                &exit_status,
+                NULL);
+    }
+    else if ((dummy = g_find_program_in_path("xlock")) != NULL)
+    {
+        g_spawn_command_line_sync("xlock -mode blank",
+                NULL,
+                NULL,
+                &exit_status,
+                NULL);
+    }
+    else
+    {
+        return FALSE;
+    }
+
+    g_free(dummy);
+
+    if (WIFEXITED(exit_status) && WEXITSTATUS(exit_status) == 0)
+        return TRUE;
+
+    return FALSE;
+}
+
 /* Verify that a program is running and that an executable is available. */
 static gboolean verify_running(char * display_manager, char * executable)
 {
@@ -205,6 +253,8 @@ static void suspend_clicked(GtkButton * button, HandlerContext * handler_context
     char * error_result = NULL;
     gtk_label_set_text(GTK_LABEL(handler_context->error_label), NULL);
 
+    lock_screen();
+
     if (handler_context->suspend_UPower)
         error_result = dbus_UPower_Suspend();
     else if (handler_context->suspend_HAL)
@@ -221,6 +271,8 @@ static void hibernate_clicked(GtkButton * button, HandlerContext * handler_conte
     char * error_result = NULL;
     gtk_label_set_text(GTK_LABEL(handler_context->error_label), NULL);
 
+    lock_screen();
+
     if (handler_context->hibernate_UPower)
         error_result = dbus_UPower_Hibernate();
     else if (handler_context->hibernate_HAL)
@@ -236,6 +288,8 @@ static void switch_user_clicked(GtkButton * button, HandlerContext * handler_con
 {
     gtk_label_set_text(GTK_LABEL(handler_context->error_label), NULL);
 
+    lock_screen();
+
     if (handler_context->switch_user_GDM)
         g_spawn_command_line_sync("gdmflexiserver --startnew", NULL, NULL, NULL, NULL);
     else if (handler_context->switch_user_KDM)
