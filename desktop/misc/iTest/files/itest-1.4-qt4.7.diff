--- iTest-1.4.1.1-src/iTestClient/main_window.cpp.orig
+++ iTest-1.4.1.1-src/iTestClient/main_window.cpp
@@ -142,11 +142,11 @@ void MainWindow::setQuestionAnswered(Question::Answers selected_answers)
     QuestionItem * item = current_test_questions.value(LQListWidget->currentItem());
     item->setAnswered(selected_answers);
     if (selected_answers == Question::None) {
-        LQListWidget->currentItem()->setBackground(QBrush::QBrush(QColor::QColor(255, 255, 255)));
-        LQListWidget->currentItem()->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+        LQListWidget->currentItem()->setBackground(QBrush(QColor(255, 255, 255)));
+        LQListWidget->currentItem()->setForeground(QBrush(QColor(0, 0, 0)));
     } else {
-        LQListWidget->currentItem()->setBackground(QBrush::QBrush(QColor::QColor(197, 255, 120)));
-        LQListWidget->currentItem()->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+        LQListWidget->currentItem()->setBackground(QBrush(QColor(197, 255, 120)));
+        LQListWidget->currentItem()->setForeground(QBrush(QColor(0, 0, 0)));
         int progress = 0;
         for (int i = 0; i < LQListWidget->count(); ++i) {
             if (current_test_questions.value(LQListWidget->item(i))->answered() != Question::None) {
--- iTest-1.4.1.1-src/iTestServer/class_viewer.cpp.orig
+++ iTest-1.4.1.1-src/iTestServer/class_viewer.cpp
@@ -23,22 +23,22 @@ void MainWindow::setupClassViewer()
 {
     tbtnAdd_class->setAction(actionAdd_class, true);
     tbtnAdd_class->setText(tr("Add"));
-    tbtnAdd_class->setIconSize(QSize::QSize(16, 16));
+    tbtnAdd_class->setIconSize(QSize(16, 16));
     tbtnDelete_class->setAction(actionDelete_class, true);
     tbtnDelete_class->setText(tr("Delete"));
-    tbtnDelete_class->setIconSize(QSize::QSize(16, 16));
+    tbtnDelete_class->setIconSize(QSize(16, 16));
     tbtnAdd_student->setAction(actionAdd_student, true);
     tbtnAdd_student->setText(tr("Add"));
-    tbtnAdd_student->setIconSize(QSize::QSize(16, 16));
+    tbtnAdd_student->setIconSize(QSize(16, 16));
     tbtnDelete_student->setAction(actionDelete_student, true);
     tbtnDelete_student->setText(tr("Delete"));
-    tbtnDelete_student->setIconSize(QSize::QSize(16, 16));
+    tbtnDelete_student->setIconSize(QSize(16, 16));
     tbtnAdd_session->setAction(actionAdd_session, true);
     tbtnAdd_session->setText(tr("Add"));
-    tbtnAdd_session->setIconSize(QSize::QSize(16, 16));
+    tbtnAdd_session->setIconSize(QSize(16, 16));
     tbtnDelete_session->setAction(actionDelete_session, true);
     tbtnDelete_session->setText(tr("Delete"));
-    tbtnDelete_session->setIconSize(QSize::QSize(16, 16));
+    tbtnDelete_session->setIconSize(QSize(16, 16));
     QObject::connect(actionAdd_class, SIGNAL(triggered()), this, SLOT(addClass()));
     QObject::connect(actionDelete_class, SIGNAL(triggered()), this, SLOT(deleteClass()));
     QObject::connect(actionPrint_class_summary, SIGNAL(triggered()), this, SLOT(printClassSummary()));
@@ -114,7 +114,7 @@ void MainWindow::setCurrentClassMember(QListWidgetItem * item)
             CLSSResultsTableWidget->item(i, 0)->setData(Qt::UserRole, session->dateTime());
             CLSSResultsTableWidget->setItem(i, 1, new QTableWidgetItem(session->student(mem->sessionEntry(i).member_num)->name()));
             CLSSResultsTableWidget->item(i, 1)->setData(Qt::UserRole, mem->sessionEntry(i).member_num);
-            CLSSResultsTableWidget->item(i, 1)->setBackground(QBrush::QBrush(session->student(mem->sessionEntry(i).member_num)->passed() ? QColor::QColor(197, 255, 120) : QColor::QColor(204, 163, 0)));
+            CLSSResultsTableWidget->item(i, 1)->setBackground(QBrush(session->student(mem->sessionEntry(i).member_num)->passed() ? QColor(197, 255, 120) : QColor(204, 163, 0)));
             MTProgressBar * bar = new MTProgressBar(this);
             CLSSResultsTableWidget->setCellWidget(i, 2, bar);
             bar->setMaximum((int)(session->student(mem->sessionEntry(i).member_num)->maximumScore() * 100.0));
@@ -250,15 +250,15 @@ void MainWindow::addSession()
         if (sessions_list.contains(SVLSListWidget->item(i)->data(Qt::UserRole).toDateTime())) { continue; }
         QListWidgetItem * item = new QListWidgetItem(*(SVLSListWidget->item(i)));
         item->setFont(font);
-        item->setBackground(QBrush::QBrush(QColor::QColor(255, 255, 255)));
-        item->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+        item->setBackground(QBrush(QColor(255, 255, 255)));
+        item->setForeground(QBrush(QColor(0, 0, 0)));
         lw->addItem(item);
     }
     for (int i = 0; i < SVLASListWidget->count(); ++i) {
         if (sessions_list.contains(SVLASListWidget->item(i)->data(Qt::UserRole).toDateTime())) { continue; }
         QListWidgetItem * item = new QListWidgetItem(*(SVLASListWidget->item(i)));
-        item->setBackground(QBrush::QBrush(QColor::QColor(255, 255, 255)));
-        item->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+        item->setBackground(QBrush(QColor(255, 255, 255)));
+        item->setForeground(QBrush(QColor(0, 0, 0)));
         lw->addItem(item);
     }
     lw->setCurrentRow(0);
@@ -267,7 +267,7 @@ void MainWindow::addSession()
     QDateTime datetime = lw->currentItem()->data(Qt::UserRole).toDateTime();
     current_db_class->addSession(datetime);
     QListWidgetItem * item = new QListWidgetItem(*(lw->currentItem()));
-    item->setFont(QFont::QFont());
+    item->setFont(QFont());
     CLLSSListWidget->addItem(item);
     delete d;
     setDatabaseModified();
--- iTest-1.4.1.1-src/iTestServer/flags.cpp.orig
+++ iTest-1.4.1.1-src/iTestServer/flags.cpp
@@ -181,51 +181,51 @@ QColor MainWindow::backgroundColourForFlag(int flag)
 {
 	switch (flag) {
         case -1:
-            return QColor::QColor(255, 255, 255); break;
+            return QColor(255, 255, 255); break;
 		case 0: // 0: 255 255 255 - 0 0 0
-			return QColor::QColor(240, 255, 210); break;
+			return QColor(240, 255, 210); break;
 		case 1: // 1: 197 255 120 - 0 0 0
-			return QColor::QColor(197, 255, 120); break;
+			return QColor(197, 255, 120); break;
 		case 2: // 2: 92 163 0 - 0 0 0
-			return QColor::QColor(92, 163, 0); break;
+			return QColor(92, 163, 0); break;
 		case 3: // 3: 69 110 14 - 255 255 255
-			return QColor::QColor(69, 110, 14); break;
+			return QColor(69, 110, 14); break;
 		case 4: // 4: 17 120 122 - 255 255 255
-			return QColor::QColor(17, 120, 122); break;
+			return QColor(17, 120, 122); break;
 		case 5: // 5: 0 163 136 - 0 0 0
-			return QColor::QColor(0, 163, 136); break;
+			return QColor(0, 163, 136); break;
 		case 6: // 6: 0 147 163 - 0 0 0
-			return QColor::QColor(0, 147, 163); break;
+			return QColor(0, 147, 163); break;
 		case 7: // 7: 0 125 163 - 255 255 255
-			return QColor::QColor(0, 125, 163); break;
+			return QColor(0, 125, 163); break;
 		case 8: // 8: 0 84 163 - 255 255 255
-			return QColor::QColor(0, 84, 163); break;
+			return QColor(0, 84, 163); break;
 		case 9: // 9: 40 76 110 - 255 255 255
-			return QColor::QColor(40, 76, 110); break;
+			return QColor(40, 76, 110); break;
 		case 10: // 10: 0 11 163 - 255 255 255
-			return QColor::QColor(0, 11, 163); break;
+			return QColor(0, 11, 163); break;
 		case 11: // 11: 139 0 163 - 255 255 255
-			return QColor::QColor(139, 0, 163); break;
+			return QColor(139, 0, 163); break;
 		case 12: // 12: 163 0 79 - 255 255 255
-			return QColor::QColor(163, 0, 79); break;
+			return QColor(163, 0, 79); break;
 		case 13: // 13: 163 0 0 - 0 0 0
-			return QColor::QColor(163, 0, 0); break;
+			return QColor(163, 0, 0); break;
 		case 14: // 14: 255 0 0 - 0 0 0
-			return QColor::QColor(255, 0, 0); break;
+			return QColor(255, 0, 0); break;
 		case 15: // 15: 204 109 0 - 0 0 0
-			return QColor::QColor(204, 109, 0); break;
+			return QColor(204, 109, 0); break;
 		case 16: // 16: 204 163 0 - 0 0 0
-			return QColor::QColor(204, 163, 0); break;
+			return QColor(204, 163, 0); break;
 		case 17: // 17: 201 204 0 - 0 0 0
-			return QColor::QColor(201, 204, 0); break;
+			return QColor(201, 204, 0); break;
 		case 18: // 18: 255 251 0 - 0 0 0
-			return QColor::QColor(255, 251, 0); break;
+			return QColor(255, 251, 0); break;
 		case 19: // 19: 221 255 0 - 0 0 0
-			return QColor::QColor(221, 255, 0); break;
+			return QColor(221, 255, 0); break;
 		default: // 20+: 173 217 255 - 0 0 0
-			return QColor::QColor(173, 217, 255); break;
+			return QColor(173, 217, 255); break;
 	}
-	return QColor::QColor(255, 255, 255);
+	return QColor(255, 255, 255);
 }
 
 QColor MainWindow::foregroundColourForFlag(int flag, bool hidden)
@@ -243,8 +243,8 @@ QColor MainWindow::foregroundColourForFlag(int flag, bool hidden)
 		case 17: // 17: 201 204 0 - 0 0 0
 		case 18: // 18: 255 251 0 - 0 0 0
 		case 19: // 19: 221 255 0 - 0 0 0
-			if (hidden) { return QColor::QColor(100, 100, 100); }
-			else { return QColor::QColor(0, 0, 0); }
+			if (hidden) { return QColor(100, 100, 100); }
+			else { return QColor(0, 0, 0); }
 			break;
 		case 3: // 3: 69 110 14 - 255 255 255
 		case 4: // 4: 17 120 122 - 255 255 255
@@ -254,13 +254,13 @@ QColor MainWindow::foregroundColourForFlag(int flag, bool hidden)
 		case 10: // 10: 0 11 163 - 255 255 255
 		case 11: // 11: 139 0 163 - 255 255 255
 		case 12: // 12: 163 0 79 - 255 255 255
-			if (hidden) { return QColor::QColor(200, 200, 200); }
-			else { return QColor::QColor(255, 255, 255); }
+			if (hidden) { return QColor(200, 200, 200); }
+			else { return QColor(255, 255, 255); }
 			break;
 		default:
-			if (hidden) { return QColor::QColor(100, 100, 100); }
-			else { return QColor::QColor(0, 0, 0); }
+			if (hidden) { return QColor(100, 100, 100); }
+			else { return QColor(0, 0, 0); }
 			break;
 	}
-	return QColor::QColor(0, 0, 0);
+	return QColor(0, 0, 0);
 }
--- iTest-1.4.1.1-src/iTestServer/main_window.cpp.orig
+++ iTest-1.4.1.1-src/iTestServer/main_window.cpp
@@ -88,7 +88,7 @@ void MainWindow::clearSQNoFlags()
 void MainWindow::clearDBI()
 {
     DBIDatabaseNameLineEdit->clear();
-    DBIDateEdit->setDateTime(QDateTime::QDateTime(QDate::QDate(2006, 12, 1), QTime::QTime(0, 0)));
+    DBIDateEdit->setDateTime(QDateTime(QDate(2006, 12, 1), QTime(0, 0)));
     DBIUseLastSaveDateCheckBox->setChecked(true);
 }
 
@@ -654,24 +654,24 @@ void MainWindow::overallStatistics()
 		q_item = current_db_questions.value(LQListWidget->item(i));
 		if (q_item->recommendedDifficulty() == -1) { continue; }
 		tw_item = new QTableWidgetItem(q_item->group().isEmpty() ? q_item->name() : QString("[%1] %2").arg(q_item->group()).arg(q_item->name()));
-		tw_item->setBackground(QBrush::QBrush(backgroundColourForFlag(q_item->flag())));
-		tw_item->setForeground(QBrush::QBrush(foregroundColourForFlag(q_item->flag())));
+		tw_item->setBackground(QBrush(backgroundColourForFlag(q_item->flag())));
+		tw_item->setForeground(QBrush(foregroundColourForFlag(q_item->flag())));
 		tw_item->setFont(font);
 		stats_tw->setItem(row, 0, tw_item);
 		tw_item = new QTableWidgetItem;
 		switch (q_item->difficulty()) {
 			case -1: tw_item->setText(tr("Unknown")); break;
 			case 0: tw_item->setText(tr("Easy"));
-				tw_item->setBackground(QBrush::QBrush(QColor::QColor(197, 255, 120)));
-				tw_item->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+				tw_item->setBackground(QBrush(QColor(197, 255, 120)));
+				tw_item->setForeground(QBrush(QColor(0, 0, 0)));
 				break;
 			case 1: tw_item->setText(tr("Medium"));
-				tw_item->setBackground(QBrush::QBrush(QColor::QColor(255, 251, 0)));
-				tw_item->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+				tw_item->setBackground(QBrush(QColor(255, 251, 0)));
+				tw_item->setForeground(QBrush(QColor(0, 0, 0)));
 				break;
 			case 2: tw_item->setText(tr("Difficult"));
-				tw_item->setBackground(QBrush::QBrush(QColor::QColor(204, 109, 0)));
-				tw_item->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+				tw_item->setBackground(QBrush(QColor(204, 109, 0)));
+				tw_item->setForeground(QBrush(QColor(0, 0, 0)));
 				break;
 			default: tw_item->setText(tr("Unknown")); break;
 		}
@@ -680,25 +680,25 @@ void MainWindow::overallStatistics()
 		switch (q_item->recommendedDifficulty()) {
 			case -1: tw_item->setText(tr("Unknown")); break;
 			case 0: tw_item->setText(tr("Easy"));
-				tw_item->setBackground(QBrush::QBrush(QColor::QColor(197, 255, 120)));
-				tw_item->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+				tw_item->setBackground(QBrush(QColor(197, 255, 120)));
+				tw_item->setForeground(QBrush(QColor(0, 0, 0)));
 				break;
 			case 1: tw_item->setText(tr("Medium"));
-				tw_item->setBackground(QBrush::QBrush(QColor::QColor(255, 251, 0)));
-				tw_item->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+				tw_item->setBackground(QBrush(QColor(255, 251, 0)));
+				tw_item->setForeground(QBrush(QColor(0, 0, 0)));
 				break;
 			case 2: tw_item->setText(tr("Difficult"));
-				tw_item->setBackground(QBrush::QBrush(QColor::QColor(204, 109, 0)));
-				tw_item->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+				tw_item->setBackground(QBrush(QColor(204, 109, 0)));
+				tw_item->setForeground(QBrush(QColor(0, 0, 0)));
 				break;
 			default: tw_item->setText(tr("Unknown")); break;
 		}
 		stats_tw->setItem(row, 2, tw_item);
 		tw_item = new QTableWidgetItem(makeString(q_item->correctAnsCount()));
-		tw_item->setFont(font); tw_item->setForeground(QBrush::QBrush(QColor::QColor(92, 163, 0)));
+		tw_item->setFont(font); tw_item->setForeground(QBrush(QColor(92, 163, 0)));
 		stats_tw->setItem(row, 3, tw_item);
 		tw_item = new QTableWidgetItem(makeString(q_item->incorrectAnsCount()));
-		tw_item->setFont(font); tw_item->setForeground(QBrush::QBrush(QColor::QColor(204, 109, 0)));
+		tw_item->setFont(font); tw_item->setForeground(QBrush(QColor(204, 109, 0)));
 		stats_tw->setItem(row, 4, tw_item);
 		tw_item = new QTableWidgetItem;
 		QPushButton * stats_btn_adjust = new QPushButton(tr("Adjust difficulty"), stats_tw);
@@ -746,16 +746,16 @@ void MainWindow::statsAdjust(QAbstractButton * btn)
 	switch (rdif) {
 		case -1: break;
 		case 0: tw_item->setText(tr("Easy"));
-			tw_item->setBackground(QBrush::QBrush(QColor::QColor(197, 255, 120)));
-			tw_item->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+			tw_item->setBackground(QBrush(QColor(197, 255, 120)));
+			tw_item->setForeground(QBrush(QColor(0, 0, 0)));
 			break;
 		case 1: tw_item->setText(tr("Medium"));
-			tw_item->setBackground(QBrush::QBrush(QColor::QColor(255, 251, 0)));
-			tw_item->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+			tw_item->setBackground(QBrush(QColor(255, 251, 0)));
+			tw_item->setForeground(QBrush(QColor(0, 0, 0)));
 			break;
 		case 2: tw_item->setText(tr("Difficult"));
-			tw_item->setBackground(QBrush::QBrush(QColor::QColor(204, 109, 0)));
-			tw_item->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+			tw_item->setBackground(QBrush(QColor(204, 109, 0)));
+			tw_item->setForeground(QBrush(QColor(0, 0, 0)));
 			break;
 		default: break;
 	}
--- iTest-1.4.1.1-src/iTestServer/mtlistwidget.h.orig
+++ iTest-1.4.1.1-src/iTestServer/mtlistwidget.h
@@ -57,17 +57,17 @@ public slots:
     static void highlightItem(QListWidgetItem * item) {
         if (item == NULL) { return; }
         for (int i = 0; i < item->listWidget()->count(); ++i) {
-            item->listWidget()->item(i)->setBackground(QBrush::QBrush(QColor::QColor(255, 255, 255)));
-            item->listWidget()->item(i)->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+            item->listWidget()->item(i)->setBackground(QBrush(QColor(255, 255, 255)));
+            item->listWidget()->item(i)->setForeground(QBrush(QColor(0, 0, 0)));
         }
-        item->setBackground(QBrush::QBrush(QColor::QColor(197, 255, 120)));
-        item->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+        item->setBackground(QBrush(QColor(197, 255, 120)));
+        item->setForeground(QBrush(QColor(0, 0, 0)));
         item->listWidget()->clearSelection();
     };
     bool isItemHighlighted(int i) { return isItemHighlighted(item(i)); };
     static bool isItemHighlighted(QListWidgetItem * item) {
         if (item == NULL) { return false; }
-        return (item->background() == QBrush::QBrush(QColor::QColor(197, 255, 120)));
+        return (item->background() == QBrush(		QColor(197, 255, 120)));
     };
     int highlightedRow() { return row(highlightedItem()); };
     QListWidgetItem * highlightedItem() {
--- iTest-1.4.1.1-src/iTestServer/mtwidgetpalettes.h.orig
+++ iTest-1.4.1.1-src/iTestServer/mtwidgetpalettes.h
@@ -27,14 +27,14 @@ struct SearchLineEditPalettes
     QPalette search_active_palette;
     QPalette search_noresults_palette;
     SearchLineEditPalettes() {
-        search_active_palette.setColor(QPalette::Active, QPalette::Base, QColor::QColor(255, 251, 0));
-        search_active_palette.setColor(QPalette::Active, QPalette::Text, QColor::QColor(0, 0, 0));
-        search_active_palette.setColor(QPalette::Inactive, QPalette::Base, QColor::QColor(255, 251, 0));
-        search_active_palette.setColor(QPalette::Inactive, QPalette::Text, QColor::QColor(0, 0, 0));
-        search_noresults_palette.setColor(QPalette::Active, QPalette::Base, QColor::QColor(255, 0, 0));
-        search_noresults_palette.setColor(QPalette::Active, QPalette::Text, QColor::QColor(0, 0, 0));
-        search_noresults_palette.setColor(QPalette::Inactive, QPalette::Base, QColor::QColor(255, 0, 0));
-        search_noresults_palette.setColor(QPalette::Inactive, QPalette::Text, QColor::QColor(0, 0, 0));
+        search_active_palette.setColor(QPalette::Active, QPalette::Base, QColor(255, 251, 0));
+        search_active_palette.setColor(QPalette::Active, QPalette::Text, QColor(0, 0, 0));
+        search_active_palette.setColor(QPalette::Inactive, QPalette::Base, QColor(255, 251, 0));
+        search_active_palette.setColor(QPalette::Inactive, QPalette::Text, QColor(0, 0, 0));
+        search_noresults_palette.setColor(QPalette::Active, QPalette::Base, QColor(255, 0, 0));
+        search_noresults_palette.setColor(QPalette::Active, QPalette::Text, QColor(0, 0, 0));
+        search_noresults_palette.setColor(QPalette::Inactive, QPalette::Base, QColor(255, 0, 0));
+        search_noresults_palette.setColor(QPalette::Inactive, QPalette::Text, QColor(0, 0, 0));
     };
 };
 
--- iTest-1.4.1.1-src/iTestServer/print_engine.cpp.orig
+++ iTest-1.4.1.1-src/iTestServer/print_engine.cpp
@@ -614,13 +614,13 @@ void MainWindow::quickPrint()
     if (!printClientResults(client, default_printer)) {
         QListWidgetItem * log_entry = new QListWidgetItem(tr("%1 > Client #%2 (%3) > failed to print the client's results (Server QuickPrint call)").arg(QDateTime::currentDateTime().toString("yyyy.MM.dd-hh:mm:ss")).arg(client->number()).arg(client->name()));
         SMSLListWidget->insertItem(0, log_entry);
-        log_entry->setBackground(QBrush::QBrush(QColor::QColor(200, 0, 0)));
-        log_entry->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+        log_entry->setBackground(QBrush(QColor(200, 0, 0)));
+        log_entry->setForeground(QBrush(QColor(0, 0, 0)));
     } else {
         QListWidgetItem * log_entry = new QListWidgetItem(tr("%1 > Client #%2 (%3) > results printed successfully (Server QuickPrint call)").arg(QDateTime::currentDateTime().toString("yyyy.MM.dd-hh:mm:ss")).arg(client->number()).arg(client->name()));
         SMSLListWidget->insertItem(0, log_entry);
-        log_entry->setBackground(QBrush::QBrush(QColor::QColor(180, 255, 0)));
-        log_entry->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+        log_entry->setBackground(QBrush(QColor(180, 255, 0)));
+        log_entry->setForeground(QBrush(QColor(0, 0, 0)));
     }
 }
 
@@ -654,8 +654,8 @@ void MainWindow::print()
             if (mainStackedWidget->currentIndex() == 5) {
                 QListWidgetItem * log_entry = new QListWidgetItem(tr("%1 > Client #%2 (%3) > failed to print the client's results (Server Print call)").arg(QDateTime::currentDateTime().toString("yyyy.MM.dd-hh:mm:ss")).arg(student->number()).arg(student->name()));
                 SMSLListWidget->insertItem(0, log_entry);
-                log_entry->setBackground(QBrush::QBrush(QColor::QColor(200, 0, 0)));
-                log_entry->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+                log_entry->setBackground(QBrush(QColor(200, 0, 0)));
+                log_entry->setForeground(QBrush(QColor(0, 0, 0)));
             } else {
                 statusBar()->showMessage(tr("Failed to print the results"), 10000);
             }
@@ -663,8 +663,8 @@ void MainWindow::print()
             if (mainStackedWidget->currentIndex() == 5) {
                 QListWidgetItem * log_entry = new QListWidgetItem(tr("%1 > Client #%2 (%3) > results printed successfully (Server Print call)").arg(QDateTime::currentDateTime().toString("yyyy.MM.dd-hh:mm:ss")).arg(student->number()).arg(student->name()));
                 SMSLListWidget->insertItem(0, log_entry);
-                log_entry->setBackground(QBrush::QBrush(QColor::QColor(180, 255, 0)));
-                log_entry->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+                log_entry->setBackground(QBrush(QColor(180, 255, 0)));
+                log_entry->setForeground(QBrush(QColor(0, 0, 0)));
             } else {
                 statusBar()->showMessage(tr("Results printed successfully"), 10000);
             }
--- iTest-1.4.1.1-src/iTestServer/questions.cpp.orig
+++ iTest-1.4.1.1-src/iTestServer/questions.cpp
@@ -266,7 +266,7 @@ void MainWindow::hideQuestion()
 void MainWindow::hideQuestion(QListWidgetItem * q_item, QuestionItem * item)
 {
 	q_item->setHidden(item->isHidden() && !actionShow_hidden->isChecked());
-	q_item->setForeground(QBrush::QBrush(foregroundColourForFlag(item->flag(), item->isHidden())));
+	q_item->setForeground(QBrush(foregroundColourForFlag(item->flag(), item->isHidden())));
 	if (item->isHidden()) {
 		QFont font; font.setBold(true);
 		q_item->setFont(font);
@@ -294,8 +294,8 @@ QIcon MainWindow::iconForDifficulty(int q_difficulty_i)
 
 void MainWindow::setQuestionItemColour(QListWidgetItem * q_item, int q_flag_i)
 {
-	q_item->setBackground(QBrush::QBrush(backgroundColourForFlag(q_flag_i)));
-	q_item->setForeground(QBrush::QBrush(foregroundColourForFlag(q_flag_i)));
+	q_item->setBackground(QBrush(backgroundColourForFlag(q_flag_i)));
+	q_item->setForeground(QBrush(foregroundColourForFlag(q_flag_i)));
 }
 
 void MainWindow::searchByGroup() {
--- iTest-1.4.1.1-src/iTestServer/server.cpp.orig
+++ iTest-1.4.1.1-src/iTestServer/server.cpp
@@ -223,7 +223,7 @@ void MainWindow::updateTestTime()
 {
 	if (rbtnTestTime->isChecked()) {
 		if (TSQnumSpinBox->value() == 0) {
-			TSQuestionTimeEdit->setTime(QTime::QTime(0, 0));
+			TSQuestionTimeEdit->setTime(QTime(0, 0));
 		} else {
 			QTime time = TSTestTimeEdit->time(); QTime nulltime (0, 0);
 			QTime qtime = nulltime.addSecs(((time.hour() * 60 * 60) + (time.minute() * 60)) / TSQnumSpinBox->value());
@@ -567,8 +567,8 @@ void MainWindow::addClient()
     client->setNumber(item->text().toInt());
     QListWidgetItem * log_entry = new QListWidgetItem(tr("%1 > Client #%2 connected").arg(QDateTime::currentDateTime().toString("yyyy.MM.dd-hh:mm:ss")).arg(item->text()));
     SMSLListWidget->insertItem(0, log_entry);
-    log_entry->setBackground(QBrush::QBrush(QColor::QColor(197, 255, 120)));
-    log_entry->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+    log_entry->setBackground(QBrush(QColor(197, 255, 120)));
+    log_entry->setForeground(QBrush(QColor(0, 0, 0)));
     updateLC(client);
 
     QByteArray client_number;
@@ -591,8 +591,8 @@ void MainWindow::clientIdentified(Client * client)
 {
     QListWidgetItem * log_entry = new QListWidgetItem(tr("%1 > Client #%2 identified as %3").arg(QDateTime::currentDateTime().toString("yyyy.MM.dd-hh:mm:ss")).arg(client->number()).arg(client->name()));
     SMSLListWidget->insertItem(0, log_entry);
-    log_entry->setBackground(QBrush::QBrush(QColor::QColor(17, 120, 122)));
-    log_entry->setForeground(QBrush::QBrush(QColor::QColor(255, 255, 255)));
+    log_entry->setBackground(QBrush(QColor(17, 120, 122)));
+    log_entry->setForeground(QBrush(QColor(255, 255, 255)));
     if (current_db_clients.value(SMLCListWidget->currentItem()) == client)
     { setCurrentClient(); }
     updateLC(client); toggleSaveSessionEnabled();
@@ -602,16 +602,16 @@ void MainWindow::clientFinished(Client * client)
 {
     QListWidgetItem * log_entry = new QListWidgetItem(tr("%1 > Client #%2 (%3) finished the exam").arg(QDateTime::currentDateTime().toString("yyyy.MM.dd-hh:mm:ss")).arg(client->number()).arg(client->name()));
     SMSLListWidget->insertItem(0, log_entry);
-    log_entry->setBackground(QBrush::QBrush(QColor::QColor(255, 251, 0)));
-    log_entry->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+    log_entry->setBackground(QBrush(QColor(255, 251, 0)));
+    log_entry->setForeground(QBrush(QColor(0, 0, 0)));
 }
 
 void MainWindow::clientResultsLoaded(Client * client)
 {
     QListWidgetItem * log_entry = new QListWidgetItem(tr("%1 > Client #%2 (%3) submitted results").arg(QDateTime::currentDateTime().toString("yyyy.MM.dd-hh:mm:ss")).arg(client->number()).arg(client->name()));
     SMSLListWidget->insertItem(0, log_entry);
-    log_entry->setBackground(QBrush::QBrush(QColor::QColor(221, 255, 0)));
-    log_entry->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+    log_entry->setBackground(QBrush(QColor(221, 255, 0)));
+    log_entry->setForeground(QBrush(QColor(0, 0, 0)));
     if (current_db_clients.value(SMLCListWidget->currentItem()) == client)
     { setCurrentClient(); }
     updateLC(client); sendCorrectAnswers(client);
@@ -619,13 +619,13 @@ void MainWindow::clientResultsLoaded(Client * client)
         if (!printClientResults(client, default_printer)) {
             QListWidgetItem * log_entry = new QListWidgetItem(tr("%1 > Client #%2 (%3) > failed to print the client's results").arg(QDateTime::currentDateTime().toString("yyyy.MM.dd-hh:mm:ss")).arg(client->number()).arg(client->name()));
             SMSLListWidget->insertItem(0, log_entry);
-            log_entry->setBackground(QBrush::QBrush(QColor::QColor(255, 0, 0)));
-            log_entry->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+            log_entry->setBackground(QBrush(QColor(255, 0, 0)));
+            log_entry->setForeground(QBrush(QColor(0, 0, 0)));
         } else {
             QListWidgetItem * log_entry = new QListWidgetItem(tr("%1 > Client #%2 (%3) > results printed successfully").arg(QDateTime::currentDateTime().toString("yyyy.MM.dd-hh:mm:ss")).arg(client->number()).arg(client->name()));
             SMSLListWidget->insertItem(0, log_entry);
-            log_entry->setBackground(QBrush::QBrush(QColor::QColor(221, 255, 0)));
-            log_entry->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+            log_entry->setBackground(QBrush(QColor(221, 255, 0)));
+            log_entry->setForeground(QBrush(QColor(0, 0, 0)));
         }
     }
 }
@@ -639,8 +639,8 @@ void MainWindow::clientDisconnected(Client * client)
     } else {
        log_entry->setText(tr("%1 > Client #%2 disconnected").arg(QDateTime::currentDateTime().toString("yyyy.MM.dd-hh:mm:ss")).arg(client->number()));
     }
-    log_entry->setBackground(QBrush::QBrush(QColor::QColor(204, 109, 0)));
-    log_entry->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+    log_entry->setBackground(QBrush(QColor(204, 109, 0)));
+    log_entry->setForeground(QBrush(QColor(0, 0, 0)));
     if (current_db_clients.value(SMLCListWidget->currentItem()) == client)
     { setCurrentClient(); }
     updateLC(client);
@@ -687,17 +687,17 @@ void MainWindow::loadClientResults(QMap<QString, QuestionAnswer> * results, QTab
             item->setText(q_item->group().isEmpty() ? q_item->name() : QString("[%1] %2").arg(q_item->group()).arg(q_item->name()));
         }
         item->setIcon(iconForDifficulty(qans.difficulty()));
-        item->setBackground(QBrush::QBrush(backgroundColourForFlag(qans.flag())));
-        item->setForeground(QBrush::QBrush(foregroundColourForFlag(qans.flag())));
+        item->setBackground(QBrush(backgroundColourForFlag(qans.flag())));
+        item->setForeground(QBrush(foregroundColourForFlag(qans.flag())));
         tw->setItem(row, 0, item);
         double score = qans.score(sys);
         item = new QTableWidgetItem(tr("%1 out of %2").arg(score).arg(qans.maximumScore(sys)));
         if (score > 0.0) {
-            item->setBackground(QBrush::QBrush(QColor::QColor(197, 255, 120)));
-            item->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+            item->setBackground(QBrush(QColor(197, 255, 120)));
+            item->setForeground(QBrush(QColor(0, 0, 0)));
         } else {
-            item->setBackground(QBrush::QBrush(QColor::QColor(204, 109, 0)));
-            item->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+            item->setBackground(QBrush(QColor(204, 109, 0)));
+            item->setForeground(QBrush(QColor(0, 0, 0)));
         }
         tw->setItem(row, 1, item);
         item = new QTableWidgetItem;
@@ -744,12 +744,12 @@ void MainWindow::updateLC(Client * client)
           client_items.at(i)->setText(client->name());
        switch (client->socket()->state()) {
           case QAbstractSocket::UnconnectedState:
-             client_items.at(i)->setBackground(QBrush::QBrush(QColor::QColor(204, 109, 0)));
-             client_items.at(i)->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+             client_items.at(i)->setBackground(QBrush(QColor(204, 109, 0)));
+             client_items.at(i)->setForeground(QBrush(QColor(0, 0, 0)));
              break;
           case QAbstractSocket::ConnectedState:
-             client_items.at(i)->setBackground(QBrush::QBrush(QColor::QColor(197, 255, 120)));
-             client_items.at(i)->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+             client_items.at(i)->setBackground(QBrush(QColor(197, 255, 120)));
+             client_items.at(i)->setForeground(QBrush(QColor(0, 0, 0)));
              break;
           case QAbstractSocket::HostLookupState:
           case QAbstractSocket::ConnectingState:
@@ -757,8 +757,8 @@ void MainWindow::updateLC(Client * client)
           case QAbstractSocket::ClosingState:
           case QAbstractSocket::ListeningState:
           default:
-             client_items.at(i)->setBackground(QBrush::QBrush(QColor::QColor(201, 204, 0)));
-             client_items.at(i)->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+             client_items.at(i)->setBackground(QBrush(QColor(201, 204, 0)));
+             client_items.at(i)->setForeground(QBrush(QColor(0, 0, 0)));
              break;
        }
     }
@@ -834,8 +834,8 @@ bool MainWindow::addOfflineClient(const QString & file_name)
     client->setNumber(item->text().toInt()); item->setText(client->name());
     QListWidgetItem * log_entry = new QListWidgetItem(tr("%1 > Client #%2 (%3) added").arg(QDateTime::currentDateTime().toString("yyyy.MM.dd-hh:mm:ss")).arg(client->number()).arg(client->name()));
     SMSLListWidget->insertItem(0, log_entry);
-    log_entry->setBackground(QBrush::QBrush(QColor::QColor(0, 125, 163)));
-    log_entry->setForeground(QBrush::QBrush(QColor::QColor(255, 255, 255)));
+    log_entry->setBackground(QBrush(QColor(0, 125, 163)));
+    log_entry->setForeground(QBrush(QColor(255, 255, 255)));
     updateLC(client); toggleSaveSessionEnabled();
     QObject::connect(client, SIGNAL(resultsLoaded(Client *)), this, SLOT(clientResultsLoaded(Client *)));
     client->loadResults(rfile.readAll());
@@ -859,8 +859,8 @@ void MainWindow::addOfflineClients()
         if (!addOfflineClient(client_logs.at(i).absoluteFilePath())) {
             QListWidgetItem * log_entry = new QListWidgetItem (tr("%1 > Failed to add off-line client").arg(QDateTime::currentDateTime().toString("yyyy.MM.dd-hh:mm:ss")));
             SMSLListWidget->insertItem(0, log_entry);
-            log_entry->setBackground(QBrush::QBrush(QColor::QColor(204, 109, 0)));
-            log_entry->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+            log_entry->setBackground(QBrush(QColor(204, 109, 0)));
+            log_entry->setForeground(QBrush(QColor(0, 0, 0)));
         }
     }
 }
@@ -989,8 +989,8 @@ void MainWindow::clearSM()
 	TSGroupsCheckBox->setChecked(false);
 	TSMaxQnumCheckBox->setChecked(false);
 	rbtnTestTime->setChecked(true);
-	TSTestTimeEdit->setTime(QTime::QTime(0, 0));
-	TSQuestionTimeEdit->setTime(QTime::QTime(0, 0));
+	TSTestTimeEdit->setTime(QTime(0, 0));
+	TSQuestionTimeEdit->setTime(QTime(0, 0));
     TSDoNotPrintResultsCheckBox->setChecked(false);
     TSHideQuestionNamesCheckBox->setChecked(false);
     TSHideCorrectAnswersCheckBox->setChecked(false);
--- iTest-1.4.1.1-src/iTestServer/session.cpp.orig
+++ iTest-1.4.1.1-src/iTestServer/session.cpp
@@ -33,9 +33,9 @@ LogEntry::LogEntry(int bgr, int bgg, int bgb, int fgr, int fgg, int fgb, const Q
 	le_text = text;
 }
 
-QColor LogEntry::entryBackgroundColour() { return QColor::QColor(le_bgr, le_bgg, le_bgb); }
+QColor LogEntry::entryBackgroundColour() { return QColor(le_bgr, le_bgg, le_bgb); }
 
-QColor LogEntry::entryForegroundColour() { return QColor::QColor(le_fgr, le_fgg, le_fgb); }
+QColor LogEntry::entryForegroundColour() { return QColor(le_fgr, le_fgg, le_fgb); }
 
 QString LogEntry::entryText() { return le_text; }
 
@@ -111,7 +111,7 @@ QDateTime Session::dateTime() { return s_datetime; }
 
 void Session::addLogEntry(int bgr, int bgg, int bgb, int fgr, int fgg, int fgb, const QString & text)
 {
-	s_log << LogEntry::LogEntry(bgr, bgg, bgb, fgr, fgg, fgb, text);
+	s_log << LogEntry(bgr, bgg, bgb, fgr, fgg, fgb, text);
 }
 
 int Session::numLogEntries() { return s_log.count(); }
--- iTest-1.4.1.1-src/iTestServer/session_viewer.cpp.orig
+++ iTest-1.4.1.1-src/iTestServer/session_viewer.cpp
@@ -189,19 +189,19 @@ void MainWindow::setCurrentSession(QListWidgetItem * item)
 	SVLCListWidget->clear(); SVLogListWidget->clear();
 	for (int i = 0; i < session->numLogEntries(); ++i) {
 		QListWidgetItem * log_entry = new QListWidgetItem (session->logEntry(i).entryText(), SVLogListWidget);
-		log_entry->setBackground(QBrush::QBrush(session->logEntry(i).entryBackgroundColour()));
-		log_entry->setForeground(QBrush::QBrush(session->logEntry(i).entryForegroundColour()));
+		log_entry->setBackground(QBrush(session->logEntry(i).entryBackgroundColour()));
+		log_entry->setForeground(QBrush(session->logEntry(i).entryForegroundColour()));
 	}
 	SVLogGroupBox->setVisible(session->numLogEntries() > 0);
 	for (int i = 0; i < session->numStudents(); ++i) {
 		QListWidgetItem * item = new QListWidgetItem(session->student(i)->name(), SVLCListWidget);
 		current_db_students.insert(item, session->student(i));
 		if (session->student(i)->passed()) {
-            item->setBackground(QBrush::QBrush(QColor::QColor(197, 255, 120)));
+            item->setBackground(QBrush(QColor(197, 255, 120)));
         } else {
-            item->setBackground(QBrush::QBrush(QColor::QColor(204, 163, 0)));
+            item->setBackground(QBrush(QColor(204, 163, 0)));
         }
-        item->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+        item->setForeground(QBrush(QColor(0, 0, 0)));
 	}
     SVPassMarkTableWidget->clearContents();
     SVPassMarkTableWidget->verticalHeader()->hide();
@@ -211,8 +211,8 @@ void MainWindow::setCurrentSession(QListWidgetItem * item)
 		for (int i = 0; i < session->passMark().count(); ++i) {
 			if (session->passMark().condition(i) < 0 || session->passMark().condition(i) >= current_db_f.size()) { continue; }
 		    item = new QTableWidgetItem(QString("%1 - %2").arg(session->passMark().condition(i) + 1).arg(current_db_f[session->passMark().condition(i)]));
-		    item->setBackground(QBrush::QBrush(backgroundColourForFlag(session->passMark().condition(i))));
-		    item->setForeground(QBrush::QBrush(foregroundColourForFlag(session->passMark().condition(i))));
+		    item->setBackground(QBrush(backgroundColourForFlag(session->passMark().condition(i))));
+		    item->setForeground(QBrush(foregroundColourForFlag(session->passMark().condition(i))));
 		    SVPassMarkTableWidget->setItem(i, 0, item);
 		    item = new QTableWidgetItem(makeString(session->passMark().value(i)));
 		    SVPassMarkTableWidget->setItem(i, 1, item);
@@ -429,15 +429,15 @@ void MainWindow::loadStudentResults(QMap<QString, QuestionAnswer> * results)
 void MainWindow::selectSessionItem(QListWidgetItem * item)
 {
     for (int i = 0; i < SVLSListWidget->count(); ++i) {
-		SVLSListWidget->item(i)->setBackground(QBrush::QBrush(QColor::QColor(255, 255, 255)));
-		SVLSListWidget->item(i)->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+		SVLSListWidget->item(i)->setBackground(QBrush(QColor(255, 255, 255)));
+		SVLSListWidget->item(i)->setForeground(QBrush(QColor(0, 0, 0)));
 	}
 	for (int i = 0; i < SVLASListWidget->count(); ++i) {
-		SVLASListWidget->item(i)->setBackground(QBrush::QBrush(QColor::QColor(255, 255, 255)));
-		SVLASListWidget->item(i)->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+		SVLASListWidget->item(i)->setBackground(QBrush(QColor(255, 255, 255)));
+		SVLASListWidget->item(i)->setForeground(QBrush(QColor(0, 0, 0)));
 	}
-	item->setBackground(QBrush::QBrush(QColor::QColor(197, 255, 120)));
-    item->setForeground(QBrush::QBrush(QColor::QColor(0, 0, 0)));
+	item->setBackground(QBrush(QColor(197, 255, 120)));
+    item->setForeground(QBrush(QColor(0, 0, 0)));
 	item->listWidget()->clearSelection();
 }
 
--- iTest-1.4.1.1-src/iTestServer/svg_item.cpp.orig
+++ iTest-1.4.1.1-src/iTestServer/svg_item.cpp
@@ -45,7 +45,7 @@ bool SvgItem::setSvg(QString svg)
     painter.drawRect(QRect(0, 0, 64, 64));
     painter.restore();
     svgrenderer.render(&painter);
-    setIcon(QIcon::QIcon(pixmap));
+    setIcon(QIcon(pixmap));
     si_svg = svg;
     return true;
 }
