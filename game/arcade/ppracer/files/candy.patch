diff -rupN cvs20060703/data/config.nut.in ppracer-0.5pre/data/config.nut.in
--- cvs20060703/data/config.nut.in	2006-04-07 10:10:40.000000000 +0200
+++ ppracer-0.5alpha/data/config.nut.in	2006-08-18 20:26:40.000000000 +0200
@@ -39,7 +39,7 @@ bpp_mode = 0,
 fullscreen_description = @"
 If true then the game will run in full-screen mode.
 ",
-fullscreen = false,
+fullscreen = true,
 
 stencil_buffer_description = @"
 Set this to true to activate the stencil buffer
diff -rupN cvs20060703/data/themes/conditions/common/night_light.nut ppracer-0.5pre/data/themes/conditions/common/night_light.nut
--- cvs20060703/data/themes/conditions/common/night_light.nut	2006-05-05 11:53:50.000000000 +0200
+++ ppracer-0.5alpha/data/themes/conditions/common/night_light.nut	2006-08-18 20:26:40.000000000 +0200
@@ -3,7 +3,7 @@ pptheme.course_light({
 	id = 0,
 	position = [1, 1, 0, 0],
 	diffuse = [0.39, 0.51, 0.88, 1],
-	specular [0.0, 0.0, 0.0, 1],
+	specular = [0.0, 0.0, 0.0, 1],
 	ambient = [0.0, 0.09, 0.34, 1.0]
 });
 
diff -rupN cvs20060703/src/configuration.cpp ppracer-0.5pre/src/configuration.cpp
--- cvs20060703/src/configuration.cpp	2006-02-01 10:54:52.000000000 +0100
+++ ppracer-0.5alpha/src/configuration.cpp	2006-08-18 20:26:40.000000000 +0200
@@ -31,6 +31,7 @@ Configuration::Configuration()
    m_videoBtn(_("Video")),
    m_audioBtn(_("Audio")),
    m_keyboardBtn(_("Keyboard")),
+   m_keyboard2Btn(_("Keyboard")+"2"),
    m_joystickBtn(_("Joystick")),
    m_backBtn(_("Back"))
 {
@@ -77,6 +78,12 @@ Configuration::Configuration()
 
 	position.y()-=40;
 
+	m_keyboard2Btn.setPosition(position);
+	m_keyboard2Btn.alignment.center();
+	m_keyboard2Btn.signalClicked.Connect(ppogl::CreateSlot(this,&Configuration::keyboard2));	
+
+	position.y()-=40;
+
 	m_joystickBtn.setPosition(position);
 	m_joystickBtn.alignment.center();
 	m_joystickBtn.signalClicked.Connect(ppogl::CreateSlot(this,&Configuration::joystick));	
@@ -158,6 +165,12 @@ Configuration::keyboard()
 }
 
 void
+Configuration::keyboard2()
+{
+	setMode( CONFIG_KEYBOARD2 );
+}
+
+void
 Configuration::joystick()
 {
 	setMode( CONFIG_JOYSTICK );
diff -rupN cvs20060703/src/configuration.h ppracer-0.5pre/src/configuration.h
--- cvs20060703/src/configuration.h	2006-02-01 10:54:52.000000000 +0100
+++ ppracer-0.5alpha/src/configuration.h	2006-08-18 20:26:40.000000000 +0200
@@ -33,6 +33,7 @@ class Configuration
 	ppogl::Button m_videoBtn;
 	ppogl::Button m_audioBtn;
 	ppogl::Button m_keyboardBtn;	
+	ppogl::Button m_keyboard2Btn;	
 	ppogl::Button m_joystickBtn;	
 
 	ppogl::Button m_backBtn;
@@ -50,6 +51,7 @@ public:
 	void video();
 	void audio();
 	void keyboard();
+	void keyboard2();
 	void joystick();
 };
 
diff -rupN cvs20060703/src/event_select.cpp ppracer-0.5pre/src/event_select.cpp
--- cvs20060703/src/event_select.cpp	2006-04-26 13:55:02.000000000 +0200
+++ ppracer-0.5alpha/src/event_select.cpp	2006-08-18 20:26:40.000000000 +0200
@@ -198,11 +198,11 @@ EventSelect::keyPressEvent(SDLKey key)
 	switch (key){
 		case SDLK_UP:
 			--m_cupListBox;
-			eventChanged();
+			cupChanged();
 	    	return true;
 		case SDLK_DOWN:
 			++m_cupListBox;
-			eventChanged();
+			cupChanged();
 	    	return true;
 		case SDLK_LEFT:
 			--m_eventListBox;
diff -rupN cvs20060703/src/keyboardconfig.cpp ppracer-0.5pre/src/keyboardconfig.cpp
--- cvs20060703/src/keyboardconfig.cpp	2006-01-15 10:38:26.000000000 +0100
+++ ppracer-0.5alpha/src/keyboardconfig.cpp	2006-08-18 20:26:40.000000000 +0200
@@ -268,3 +268,166 @@ KeyboardConfig::getKey(std::string& stri
 		return SDLKey(0);
 	}
 }
+
+
+Keyboard2Config::Keyboard2Config()
+ : ConfigMode(_("Keyboard Configuration")+"2"),
+   m_leftLbl(_("Turn left:")),
+   m_rightLbl(_("Turn right:")),
+   m_paddleLbl(_("Paddle:")),
+   m_brakeLbl(_("Brake:")),
+   m_jumpLbl(_("Jump:")),
+   m_trickLbl(_("Trick:")),
+   m_resetLbl(_("Reset:")),
+   m_pauseLbl(_("Pause:"))
+{
+	ppogl::Vec2d position(40,350);
+	ppogl::Vec2d position2(600,350);
+	
+	m_leftLbl.setPosition(position);
+	m_leftEntry.setPosition(position2);
+	m_leftEntry.alignment.right();
+	m_leftEntry.setEditable(false);
+	m_leftEntry.signalKeyPressed.Connect(ppogl::CreateSlot(this,&Keyboard2Config::setKey));
+   	m_leftEntry.setText(getKey(SDLKey(PPConfig.getInt("turn_left_key2"))));
+		
+	position.y()-=40;
+	position2.y()-=40;	
+	
+	m_rightLbl.setPosition(position);
+	m_rightEntry.setPosition(position2);
+	m_rightEntry.alignment.right();
+	m_rightEntry.setEditable(false);
+	m_rightEntry.signalKeyPressed.Connect(ppogl::CreateSlot(this,&Keyboard2Config::setKey));
+   	m_rightEntry.setText(getKey(SDLKey(PPConfig.getInt("turn_right_key2"))));
+	
+	position.y()-=40;
+	position2.y()-=40;
+	
+	m_paddleLbl.setPosition(position);
+	m_paddleEntry.setPosition(position2);
+	m_paddleEntry.alignment.right();
+	m_paddleEntry.setEditable(false);
+	m_paddleEntry.signalKeyPressed.Connect(ppogl::CreateSlot(this,&Keyboard2Config::setKey));
+   	m_paddleEntry.setText(getKey(SDLKey(PPConfig.getInt("paddle_key2"))));
+		
+	position.y()-=40;
+	position2.y()-=40;	
+		
+	m_brakeLbl.setPosition(position);
+	m_brakeEntry.setPosition(position2);
+	m_brakeEntry.alignment.right();
+	m_brakeEntry.setEditable(false);
+	m_brakeEntry.signalKeyPressed.Connect(ppogl::CreateSlot(this,&Keyboard2Config::setKey));
+   	m_brakeEntry.setText(getKey(SDLKey(PPConfig.getInt("brake_key2"))));
+	
+	position.y()-=40;
+	position2.y()-=40;	
+		
+	m_jumpLbl.setPosition(position);
+	m_jumpEntry.setPosition(position2);
+	m_jumpEntry.alignment.right();
+	m_jumpEntry.setEditable(false);
+	m_jumpEntry.signalKeyPressed.Connect(ppogl::CreateSlot(this,&Keyboard2Config::setKey));
+   	m_jumpEntry.setText(getKey(SDLKey(PPConfig.getInt("jump_key2"))));
+	
+	position.y()-=40;
+	position2.y()-=40;	
+	
+	m_trickLbl.setPosition(position);
+	m_trickEntry.setPosition(position2);
+	m_trickEntry.alignment.right();
+	m_trickEntry.setEditable(false);
+	m_trickEntry.signalKeyPressed.Connect(ppogl::CreateSlot(this,&Keyboard2Config::setKey));
+   	m_trickEntry.setText(getKey(SDLKey(PPConfig.getInt("trick_modifier_key2"))));
+	
+	position.y()-=40;
+	position2.y()-=40;	
+	
+	m_resetLbl.setPosition(position);
+	m_resetEntry.setPosition(position2);
+	m_resetEntry.alignment.right();
+	m_resetEntry.setEditable(false);
+	m_resetEntry.signalKeyPressed.Connect(ppogl::CreateSlot(this,&Keyboard2Config::setKey));
+   	m_resetEntry.setText(getKey(SDLKey(PPConfig.getInt("reset_key2"))));	
+
+	position.y()-=40;
+	position2.y()-=40;	
+	
+	m_pauseLbl.setPosition(position);
+	m_pauseEntry.setPosition(position2);
+	m_pauseEntry.alignment.right();
+	m_pauseEntry.setEditable(false);
+	m_pauseEntry.signalKeyPressed.Connect(ppogl::CreateSlot(this,&Keyboard2Config::setKey));
+   	m_pauseEntry.setText(getKey(SDLKey(PPConfig.getInt("pause_key2"))));	
+}
+
+void
+Keyboard2Config::apply()
+{
+	PPConfig.setInt("turn_left_key2", getKey(m_leftEntry.getText()));
+	PPConfig.setInt("turn_right_key2", getKey(m_rightEntry.getText()));		
+	PPConfig.setInt("paddle_key2", getKey(m_paddleEntry.getText()));		
+	PPConfig.setInt("brake_key2", getKey(m_brakeEntry.getText()));		
+	PPConfig.setInt("jump_key2", getKey(m_jumpEntry.getText()));		
+	PPConfig.setInt("trick_modifier_key2", getKey(m_trickEntry.getText()));		
+	PPConfig.setInt("reset_key2", getKey(m_resetEntry.getText()));		
+	PPConfig.setInt("pause_key2", getKey(m_pauseEntry.getText()));		
+	
+	write_config_file();
+	setMode( GameMode::prevmode );
+}
+
+void
+Keyboard2Config::setKey(ppogl::Entry *widget, SDLKey key)
+{
+	widget->setText(getKey(key));
+}
+
+std::string Keyboard2Config::getKey(SDLKey key)
+{
+	std::string content;
+	
+	for(unsigned int i=0;i<sizeof(keymap)/sizeof(KeyMap);i++){
+		if(key==keymap[i].key){
+			content=keymap[i].string;
+			break;
+		}
+	}
+		
+	if(content.empty()){
+		if(isprint(key)){
+			content=key;
+		}else{
+			char temp[10];
+			snprintf(temp,12,"%d",key);
+			content = "key ";
+			content += temp;
+		}
+	}
+	
+	return content;
+}
+
+SDLKey
+Keyboard2Config::getKey(std::string& string)
+{
+	if(string!=""){
+		for(unsigned int i=0;i<sizeof(keymap)/sizeof(KeyMap);i++){
+			if(string==keymap[i].string){
+				return keymap[i].key;
+			}
+		}
+		
+		if(string.length()>5){
+			if(!strncmp("key ",string.c_str(),4)){
+				int key = atoi(string.c_str()+4);
+				return SDLKey(key);				
+			}
+		}
+		
+		return SDLKey(string.c_str()[0]);		
+	}else{
+		return SDLKey(0);
+	}
+}
diff -rupN cvs20060703/src/keyboardconfig.h ppracer-0.5pre/src/keyboardconfig.h
--- cvs20060703/src/keyboardconfig.h	2006-01-15 10:38:26.000000000 +0100
+++ ppracer-0.5alpha/src/keyboardconfig.h	2006-08-18 20:26:40.000000000 +0200
@@ -62,4 +62,42 @@ public:
 	void setKey(ppogl::Entry *widget, SDLKey key);
 };
 
+class Keyboard2Config
+ : public ConfigMode
+{
+	ppogl::Label m_leftLbl;	
+	ppogl::Entry m_leftEntry;
+	
+	ppogl::Label m_rightLbl;
+	ppogl::Entry m_rightEntry;
+	
+	ppogl::Label m_paddleLbl;
+	ppogl::Entry m_paddleEntry;
+	
+	ppogl::Label m_brakeLbl;
+	ppogl::Entry m_brakeEntry;
+	
+	ppogl::Label m_jumpLbl;
+	ppogl::Entry m_jumpEntry;
+	
+	ppogl::Label m_trickLbl;
+	ppogl::Entry m_trickEntry;
+	
+	ppogl::Label m_resetLbl;
+	ppogl::Entry m_resetEntry;
+	
+	ppogl::Label m_pauseLbl;
+	ppogl::Entry m_pauseEntry;
+	
+public:
+	Keyboard2Config();
+
+	void apply();
+
+	std::string getKey(SDLKey key);
+	SDLKey getKey(std::string& string);
+
+	void setKey(ppogl::Entry *widget, SDLKey key);
+};
+
 #endif // KEYBOARD_CONFIG_H_
diff -rupN cvs20060703/src/loop.cpp ppracer-0.5pre/src/loop.cpp
--- cvs20060703/src/loop.cpp	2006-04-19 12:49:22.000000000 +0200
+++ ppracer-0.5alpha/src/loop.cpp	2006-08-18 20:26:40.000000000 +0200
@@ -166,6 +166,9 @@ GameMode::mainLoop()
 			case CONFIG_KEYBOARD:
 				GameMode::currentMode = new KeyboardConfig();
 				break;
+			case CONFIG_KEYBOARD2:
+				GameMode::currentMode = new Keyboard2Config();
+				break;
 			case CONFIG_JOYSTICK:
 				GameMode::currentMode = new JoystickConfig();
 				break;
diff -rupN cvs20060703/src/loop.h ppracer-0.5pre/src/loop.h
--- cvs20060703/src/loop.h	2006-01-26 09:09:02.000000000 +0100
+++ ppracer-0.5alpha/src/loop.h	2006-08-18 20:26:40.000000000 +0200
@@ -60,6 +60,7 @@ public:
 		CONFIG_VIDEO,
 		CONFIG_AUDIO,
 		CONFIG_KEYBOARD,
+		CONFIG_KEYBOARD2,
 		CONFIG_JOYSTICK,
 		CONFIG_GRAPHICS,
 		QUIT,
diff -rupN cvs20060703/src/main.cpp ppracer-0.5pre/src/main.cpp
--- cvs20060703/src/main.cpp	2006-04-07 10:10:40.000000000 +0200
+++ ppracer-0.5alpha/src/main.cpp	2006-08-18 20:26:40.000000000 +0200
@@ -204,7 +204,11 @@ main(int argc, char *argv[])
 		ppogl::os::setBaseDir();
 				
 		// set user directory to "~/.ppracer/"
+#if defined(WIN32)
+		ppogl::os::setUserDir(ppogl::os::getHomeDir()+"config/");
+#else
 		ppogl::os::setUserDir(ppogl::os::getHomeDir()+".ppracer/");
+#endif
 		
 		// parse comandline options
 		getopts(argc,argv);
@@ -248,7 +252,11 @@ main(int argc, char *argv[])
 		PP_MESSAGE("Load config file");
 		create_cfile=false;
 	}else if(data_dir.empty()){
+#if defined(WIN32)  /* obviously only full pathnames are accepted */
+		data_dir = ppogl::os::cwd();
+#else
 		data_dir = DATA_DIR;
+#endif
 	}
 
 	if(ppogl::os::isDirectory(data_dir)==false){
diff -rupN cvs20060703/src/os_util.cpp ppracer-0.5pre/src/os_util.cpp
--- cvs20060703/src/os_util.cpp	2006-01-26 09:09:02.000000000 +0100
+++ ppracer-0.5alpha/src/os_util.cpp	2006-08-18 20:26:40.000000000 +0200
@@ -21,7 +21,7 @@
 
 #include "ppracer.h"
 
-#if defined( COMPILER_IS_UNIX_COMPATIBLE )
+#if defined( COMPILER_IS_UNIX_COMPATIBLE ) && !defined( WIN32 )  /* msys/mingw :) */
 #   include <sys/utsname.h>
 #endif
 
@@ -75,8 +75,8 @@ get_os_version( char *buff, unsigned int
     // See http://www.mvps.org/vb/index2.html?tips/getversionex.htm for 
     // a table mapping OSVERSIONINFOEX entries to Windows version
 
-    char tmp_buff[BUFF_LEN];
-    int tmp_buff_size = BUFF_LEN;
+    char tmp_buff[512];
+    int tmp_buff_size = 512;
     char *ptr = tmp_buff;
     int len;
     
@@ -117,7 +117,7 @@ get_os_version( char *buff, unsigned int
 		       osvi.szCSDVersion,
 		       osvi.dwBuildNumber & 0xFFFF);
 
-	check_assertion( len >= 0, "tmp_buff too small" );
+	PP_ASSERT( len >= 0, "tmp_buff too small" );
 	if ( len < 0 ) {
 	    return -1;
 	}
@@ -173,7 +173,7 @@ get_os_version( char *buff, unsigned int
 	len = snprintf(ptr, tmp_buff_size, " (Build %d)",
 		       osvi.dwBuildNumber & 0xFFFF);
 
-	check_assertion( len >= 0, "tmp_buff too small" );
+	PP_ASSERT( len >= 0, "tmp_buff too small" );
 	if ( len < 0 ) {
 	    return -1;
 	}
diff -rupN cvs20060703/src/phys_sim.cpp ppracer-0.5pre/src/phys_sim.cpp
--- cvs20060703/src/phys_sim.cpp	2006-04-19 13:30:44.000000000 +0200
+++ ppracer-0.5alpha/src/phys_sim.cpp	2006-08-18 20:26:40.000000000 +0200
@@ -1221,7 +1221,7 @@ calc_net_force(Player& plyr, const ppogl
 	if ( fabs( fric_f_mag * sin( ANGLES_TO_RADIANS( steer_angle ) ) ) >
 	     MAX_TURN_PERPENDICULAR_FORCE ) 
 	{
-	    //check_assertion( fabs( plyr->control.turn_fact ) > 0,
+	    //PP_ASSERT( fabs( plyr->control.turn_fact ) > 0,
 		//	     "steer angle is non-zero when player is not "
 		//	     "turning" );
 	    steer_angle = RADIANS_TO_ANGLES( 
diff -rupN cvs20060703/src/ppogl/base/os.cpp ppracer-0.5pre/src/ppogl/base/os.cpp
--- cvs20060703/src/ppogl/base/os.cpp	2006-05-03 12:29:08.000000000 +0200
+++ ppracer-0.5alpha/src/ppogl/base/os.cpp	2006-08-18 20:26:40.000000000 +0200
@@ -29,7 +29,9 @@
 #include <stdarg.h> 
 #include <stdio.h> 
 #include <dirent.h>
-#include <pwd.h>
+#if !defined(WIN32)
+#  include <pwd.h>
+#endif
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <iostream>
@@ -62,6 +64,15 @@ cwd()
 	char dir[MAX_BUFFER_SIZE];
 	
 	if(getcwd(dir, MAX_BUFFER_SIZE)!=NULL){
+#if defined(WIN32)  /* squirrel doesn't like parsing strings containing backslashes */
+		char *cptr = &dir[0];
+		while (*cptr){
+			if (*cptr == '\\'){
+				*cptr = '/';
+			}
+			cptr++;
+		}
+#endif
 		return dir;
 	}else{
 		PP_WARNING("Unable to get working directory");
@@ -73,7 +84,11 @@ bool
 mkdir(const std::string& dir)
 /// create directory
 {
+#if defined(WIN32)
+	if(::mkdir(dir.c_str())){
+#else
 	if(::mkdir(dir.c_str(),S_IRWXU)){
+#endif
 		PP_PEDANTIC("Error creating directory: " << dir);
 		return false;
 	}else{
@@ -100,7 +115,11 @@ dir::dir(std::string path, const bool on
 		
 		if(only_dirs){
 			struct stat attrs;
+#if defined(WIN32)
+			if(stat((path+entry->d_name).c_str(),&attrs)==-1){
+#else
 			if(lstat((path+entry->d_name).c_str(),&attrs)==-1){
+#endif
 				continue;
 			}else{
 				if(!S_ISDIR(attrs.st_mode)){
@@ -126,7 +145,11 @@ isFile(const std::string& name, const bo
 			return false;
 		}		
 	}else{
+#if defined(WIN32)
+		if(stat(name.c_str(),&attrs)==-1){
+#else
 		if(lstat(name.c_str(),&attrs)==-1){
+#endif
 			PP_PEDANTIC("Unable to get info for file: " << name); 
 			return false;
 		}	
@@ -146,7 +169,11 @@ isDirectory(const std::string& name, con
 			return false;
 		}		
 	}else{
+#if defined(WIN32)
+		if(stat(name.c_str(),&attrs)==-1){
+#else
 		if(lstat(name.c_str(),&attrs)==-1){
+#endif
 			PP_PEDANTIC("Unable to get info for directory: " << name); 
 			return false;
 		}	
@@ -176,6 +203,9 @@ std::string
 getHomeDir()
 /// get user's home directory
 {
+#if defined(WIN32)
+	return os::cwd() + "/";
+#else
 	// get curent userid
 	const int userid = getuid();
 	
@@ -193,6 +223,7 @@ getHomeDir()
 		std::string dir = pw->pw_dir;
 		return dir + "/";
 	}
+#endif
 }
 
 /// user directory
diff -rupN cvs20060703/src/ppogl/images/writePPM.cpp ppracer-0.5pre/src/ppogl/images/writePPM.cpp
--- cvs20060703/src/ppogl/images/writePPM.cpp	2006-01-15 10:38:26.000000000 +0100
+++ ppracer-0.5alpha/src/ppogl/images/writePPM.cpp	2006-08-18 20:32:43.000000000 +0200
@@ -29,7 +29,11 @@ WritePPM::WritePPM(const std::string& fi
 	
 	std::ofstream file;
 
+#if defined(WIN32)
+	file.open(filename.c_str(), std::ofstream::binary);
+#else
 	file.open(filename.c_str());
+#endif
 
 	file << "P6\n# A Raw PPM file"
 		<< "\n# width\n" << int(image.width)
diff -rupN cvs20060703/src/stuff.cpp ppracer-0.5pre/src/stuff.cpp
--- cvs20060703/src/stuff.cpp	2006-04-07 10:10:40.000000000 +0200
+++ ppracer-0.5alpha/src/stuff.cpp	2006-08-18 20:26:40.000000000 +0200
@@ -49,7 +49,7 @@ std::string
 get_config_dir_name()
 {
 #if defined(WIN32) 
-	return CONFIG_DIR;
+	return ppogl::os::cwd() + "/" CONFIG_DIR "/";
 #else
 	const std::string& dir = ppogl::os::getUserDir();	
 	if(!ppogl::os::isDirectory(dir)){
